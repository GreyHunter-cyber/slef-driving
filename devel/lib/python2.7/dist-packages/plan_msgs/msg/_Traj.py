# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plan_msgs/Traj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import plan_msgs.msg

class Traj(genpy.Message):
  _md5sum = "490cb3b1cf624497cbfba91636b0dd01"
  _type = "plan_msgs/Traj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32     num
PointTraj[]  points

================================================================================
MSG: plan_msgs/PointTraj
int32 t
float32 d
float32 d_d
float32 d_dd
float32 d_ddd
float32 s
float32 s_d
float32 s_dd
float32 s_ddd
float32 x
float32 y
float32 yaw
float32 ks
float32 lx
float32 ly
float32 lyaw
"""
  __slots__ = ['num','points']
  _slot_types = ['int32','plan_msgs/PointTraj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Traj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.num is None:
        self.num = 0
      if self.points is None:
        self.points = []
    else:
      self.num = 0
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_i15f().pack(_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = plan_msgs.msg.PointTraj()
        _x = val1
        start = end
        end += 64
        (_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw,) = _get_struct_i15f().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_i15f().pack(_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = plan_msgs.msg.PointTraj()
        _x = val1
        start = end
        end += 64
        (_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw,) = _get_struct_i15f().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i15f = None
def _get_struct_i15f():
    global _struct_i15f
    if _struct_i15f is None:
        _struct_i15f = struct.Struct("<i15f")
    return _struct_i15f
