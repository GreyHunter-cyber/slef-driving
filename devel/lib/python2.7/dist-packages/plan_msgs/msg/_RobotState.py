# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plan_msgs/RobotState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotState(genpy.Message):
  _md5sum = "ab96e98e2f0ba56ad199d5f5d6baa6be"
  _type = "plan_msgs/RobotState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#topic: /RobotState
bool mition_arrived # arrived
int32 mition_arrive_num # arrived whitch misstion point
float32 Speed
float32 Azimuth
bool  Stop     # pause or stop flag enable
int32 loc_fix  # Positioning quality 0: miss; 1: fixed; 2: float;
"""
  __slots__ = ['mition_arrived','mition_arrive_num','Speed','Azimuth','Stop','loc_fix']
  _slot_types = ['bool','int32','float32','float32','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mition_arrived,mition_arrive_num,Speed,Azimuth,Stop,loc_fix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mition_arrived is None:
        self.mition_arrived = False
      if self.mition_arrive_num is None:
        self.mition_arrive_num = 0
      if self.Speed is None:
        self.Speed = 0.
      if self.Azimuth is None:
        self.Azimuth = 0.
      if self.Stop is None:
        self.Stop = False
      if self.loc_fix is None:
        self.loc_fix = 0
    else:
      self.mition_arrived = False
      self.mition_arrive_num = 0
      self.Speed = 0.
      self.Azimuth = 0.
      self.Stop = False
      self.loc_fix = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi2fBi().pack(_x.mition_arrived, _x.mition_arrive_num, _x.Speed, _x.Azimuth, _x.Stop, _x.loc_fix))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.mition_arrived, _x.mition_arrive_num, _x.Speed, _x.Azimuth, _x.Stop, _x.loc_fix,) = _get_struct_Bi2fBi().unpack(str[start:end])
      self.mition_arrived = bool(self.mition_arrived)
      self.Stop = bool(self.Stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi2fBi().pack(_x.mition_arrived, _x.mition_arrive_num, _x.Speed, _x.Azimuth, _x.Stop, _x.loc_fix))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.mition_arrived, _x.mition_arrive_num, _x.Speed, _x.Azimuth, _x.Stop, _x.loc_fix,) = _get_struct_Bi2fBi().unpack(str[start:end])
      self.mition_arrived = bool(self.mition_arrived)
      self.Stop = bool(self.Stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi2fBi = None
def _get_struct_Bi2fBi():
    global _struct_Bi2fBi
    if _struct_Bi2fBi is None:
        _struct_Bi2fBi = struct.Struct("<Bi2fBi")
    return _struct_Bi2fBi
