# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plan_msgs/PointTraj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PointTraj(genpy.Message):
  _md5sum = "819fa2e7955aef10d3df960cc6b9813c"
  _type = "plan_msgs/PointTraj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 t
float32 d
float32 d_d
float32 d_dd
float32 d_ddd
float32 s
float32 s_d
float32 s_dd
float32 s_ddd
float32 x
float32 y
float32 yaw
float32 ks
float32 lx
float32 ly
float32 lyaw
"""
  __slots__ = ['t','d','d_d','d_dd','d_ddd','s','s_d','s_dd','s_ddd','x','y','yaw','ks','lx','ly','lyaw']
  _slot_types = ['int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t,d,d_d,d_dd,d_ddd,s,s_d,s_dd,s_ddd,x,y,yaw,ks,lx,ly,lyaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointTraj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.t is None:
        self.t = 0
      if self.d is None:
        self.d = 0.
      if self.d_d is None:
        self.d_d = 0.
      if self.d_dd is None:
        self.d_dd = 0.
      if self.d_ddd is None:
        self.d_ddd = 0.
      if self.s is None:
        self.s = 0.
      if self.s_d is None:
        self.s_d = 0.
      if self.s_dd is None:
        self.s_dd = 0.
      if self.s_ddd is None:
        self.s_ddd = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.ks is None:
        self.ks = 0.
      if self.lx is None:
        self.lx = 0.
      if self.ly is None:
        self.ly = 0.
      if self.lyaw is None:
        self.lyaw = 0.
    else:
      self.t = 0
      self.d = 0.
      self.d_d = 0.
      self.d_dd = 0.
      self.d_ddd = 0.
      self.s = 0.
      self.s_d = 0.
      self.s_dd = 0.
      self.s_ddd = 0.
      self.x = 0.
      self.y = 0.
      self.yaw = 0.
      self.ks = 0.
      self.lx = 0.
      self.ly = 0.
      self.lyaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i15f().pack(_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw,) = _get_struct_i15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i15f().pack(_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.t, _x.d, _x.d_d, _x.d_dd, _x.d_ddd, _x.s, _x.s_d, _x.s_dd, _x.s_ddd, _x.x, _x.y, _x.yaw, _x.ks, _x.lx, _x.ly, _x.lyaw,) = _get_struct_i15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i15f = None
def _get_struct_i15f():
    global _struct_i15f
    if _struct_i15f is None:
        _struct_i15f = struct.Struct("<i15f")
    return _struct_i15f
