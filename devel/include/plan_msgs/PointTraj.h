// Generated by gencpp from file plan_msgs/PointTraj.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_POINTTRAJ_H
#define PLAN_MSGS_MESSAGE_POINTTRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_msgs
{
template <class ContainerAllocator>
struct PointTraj_
{
  typedef PointTraj_<ContainerAllocator> Type;

  PointTraj_()
    : t(0)
    , d(0.0)
    , d_d(0.0)
    , d_dd(0.0)
    , d_ddd(0.0)
    , s(0.0)
    , s_d(0.0)
    , s_dd(0.0)
    , s_ddd(0.0)
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , ks(0.0)
    , lx(0.0)
    , ly(0.0)
    , lyaw(0.0)  {
    }
  PointTraj_(const ContainerAllocator& _alloc)
    : t(0)
    , d(0.0)
    , d_d(0.0)
    , d_dd(0.0)
    , d_ddd(0.0)
    , s(0.0)
    , s_d(0.0)
    , s_dd(0.0)
    , s_ddd(0.0)
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , ks(0.0)
    , lx(0.0)
    , ly(0.0)
    , lyaw(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _t_type;
  _t_type t;

   typedef float _d_type;
  _d_type d;

   typedef float _d_d_type;
  _d_d_type d_d;

   typedef float _d_dd_type;
  _d_dd_type d_dd;

   typedef float _d_ddd_type;
  _d_ddd_type d_ddd;

   typedef float _s_type;
  _s_type s;

   typedef float _s_d_type;
  _s_d_type s_d;

   typedef float _s_dd_type;
  _s_dd_type s_dd;

   typedef float _s_ddd_type;
  _s_ddd_type s_ddd;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _ks_type;
  _ks_type ks;

   typedef float _lx_type;
  _lx_type lx;

   typedef float _ly_type;
  _ly_type ly;

   typedef float _lyaw_type;
  _lyaw_type lyaw;





  typedef boost::shared_ptr< ::plan_msgs::PointTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::PointTraj_<ContainerAllocator> const> ConstPtr;

}; // struct PointTraj_

typedef ::plan_msgs::PointTraj_<std::allocator<void> > PointTraj;

typedef boost::shared_ptr< ::plan_msgs::PointTraj > PointTrajPtr;
typedef boost::shared_ptr< ::plan_msgs::PointTraj const> PointTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::PointTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::PointTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::PointTraj_<ContainerAllocator1> & lhs, const ::plan_msgs::PointTraj_<ContainerAllocator2> & rhs)
{
  return lhs.t == rhs.t &&
    lhs.d == rhs.d &&
    lhs.d_d == rhs.d_d &&
    lhs.d_dd == rhs.d_dd &&
    lhs.d_ddd == rhs.d_ddd &&
    lhs.s == rhs.s &&
    lhs.s_d == rhs.s_d &&
    lhs.s_dd == rhs.s_dd &&
    lhs.s_ddd == rhs.s_ddd &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.ks == rhs.ks &&
    lhs.lx == rhs.lx &&
    lhs.ly == rhs.ly &&
    lhs.lyaw == rhs.lyaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::PointTraj_<ContainerAllocator1> & lhs, const ::plan_msgs::PointTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::PointTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::PointTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::PointTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::PointTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::PointTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::PointTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::PointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "819fa2e7955aef10d3df960cc6b9813c";
  }

  static const char* value(const ::plan_msgs::PointTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x819fa2e7955aef10ULL;
  static const uint64_t static_value2 = 0xd3df960cc6b9813cULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::PointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/PointTraj";
  }

  static const char* value(const ::plan_msgs::PointTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::PointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 t\n"
"float32 d\n"
"float32 d_d\n"
"float32 d_dd\n"
"float32 d_ddd\n"
"float32 s\n"
"float32 s_d\n"
"float32 s_dd\n"
"float32 s_ddd\n"
"float32 x\n"
"float32 y\n"
"float32 yaw\n"
"float32 ks\n"
"float32 lx\n"
"float32 ly\n"
"float32 lyaw\n"
;
  }

  static const char* value(const ::plan_msgs::PointTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::PointTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t);
      stream.next(m.d);
      stream.next(m.d_d);
      stream.next(m.d_dd);
      stream.next(m.d_ddd);
      stream.next(m.s);
      stream.next(m.s_d);
      stream.next(m.s_dd);
      stream.next(m.s_ddd);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.ks);
      stream.next(m.lx);
      stream.next(m.ly);
      stream.next(m.lyaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::PointTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::PointTraj_<ContainerAllocator>& v)
  {
    s << indent << "t: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
    s << indent << "d_d: ";
    Printer<float>::stream(s, indent + "  ", v.d_d);
    s << indent << "d_dd: ";
    Printer<float>::stream(s, indent + "  ", v.d_dd);
    s << indent << "d_ddd: ";
    Printer<float>::stream(s, indent + "  ", v.d_ddd);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "s_d: ";
    Printer<float>::stream(s, indent + "  ", v.s_d);
    s << indent << "s_dd: ";
    Printer<float>::stream(s, indent + "  ", v.s_dd);
    s << indent << "s_ddd: ";
    Printer<float>::stream(s, indent + "  ", v.s_ddd);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "ks: ";
    Printer<float>::stream(s, indent + "  ", v.ks);
    s << indent << "lx: ";
    Printer<float>::stream(s, indent + "  ", v.lx);
    s << indent << "ly: ";
    Printer<float>::stream(s, indent + "  ", v.ly);
    s << indent << "lyaw: ";
    Printer<float>::stream(s, indent + "  ", v.lyaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_POINTTRAJ_H
