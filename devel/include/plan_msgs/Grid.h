// Generated by gencpp from file plan_msgs/Grid.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_GRID_H
#define PLAN_MSGS_MESSAGE_GRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_msgs
{
template <class ContainerAllocator>
struct Grid_
{
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
    : stamp()
    , width(0)
    , height(0)
    , size(0)
    , value()
    , d_width(0.0)
    , d_height(0.0)  {
    }
  Grid_(const ContainerAllocator& _alloc)
    : stamp()
    , width(0)
    , height(0)
    , size(0)
    , value(_alloc)
    , d_width(0.0)
    , d_height(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _size_type;
  _size_type size;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _value_type;
  _value_type value;

   typedef float _d_width_type;
  _d_width_type d_width;

   typedef float _d_height_type;
  _d_height_type d_height;





  typedef boost::shared_ptr< ::plan_msgs::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::Grid_<ContainerAllocator> const> ConstPtr;

}; // struct Grid_

typedef ::plan_msgs::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::plan_msgs::Grid > GridPtr;
typedef boost::shared_ptr< ::plan_msgs::Grid const> GridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::Grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::Grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::Grid_<ContainerAllocator1> & lhs, const ::plan_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.size == rhs.size &&
    lhs.value == rhs.value &&
    lhs.d_width == rhs.d_width &&
    lhs.d_height == rhs.d_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::Grid_<ContainerAllocator1> & lhs, const ::plan_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84268bd882d6a8d85ea94e3017e923c7";
  }

  static const char* value(const ::plan_msgs::Grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84268bd882d6a8d8ULL;
  static const uint64_t static_value2 = 0x5ea94e3017e923c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/Grid";
  }

  static const char* value(const ::plan_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp                                                      #当前时间\n"
"int32 width                                                     #宽度分片数，左→右\n"
"int32 height                                                    #远近分片数，近→远\n"
"int32 size\n"
"int32[] value                                                  #路面分片的矩阵\n"
"float32 d_width                                                 #格网分辨率\n"
"float32 d_height                                                #格网分辨率\n"
;
  }

  static const char* value(const ::plan_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::Grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.size);
      stream.next(m.value);
      stream.next(m.d_width);
      stream.next(m.d_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::Grid_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.value[i]);
    }
    s << indent << "d_width: ";
    Printer<float>::stream(s, indent + "  ", v.d_width);
    s << indent << "d_height: ";
    Printer<float>::stream(s, indent + "  ", v.d_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_GRID_H
