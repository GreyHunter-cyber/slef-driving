// Generated by gencpp from file plan_msgs/Path.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_PATH_H
#define PLAN_MSGS_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <plan_msgs/PointSYK.h>

namespace plan_msgs
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : num(0)
    , points()  {
    }
  Path_(const ContainerAllocator& _alloc)
    : num(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector< ::plan_msgs::PointSYK_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::plan_msgs::PointSYK_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::plan_msgs::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::plan_msgs::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::plan_msgs::Path > PathPtr;
typedef boost::shared_ptr< ::plan_msgs::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::Path_<ContainerAllocator1> & lhs, const ::plan_msgs::Path_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::Path_<ContainerAllocator1> & lhs, const ::plan_msgs::Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f43f5f3b99308fc26e35370fe5eb3f6f";
  }

  static const char* value(const ::plan_msgs::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf43f5f3b99308fc2ULL;
  static const uint64_t static_value2 = 0x6e35370fe5eb3f6fULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/Path";
  }

  static const char* value(const ::plan_msgs::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32     num\n"
"PointSYK[]  points\n"
"\n"
"================================================================================\n"
"MSG: plan_msgs/PointSYK\n"
"float32 x\n"
"float32 y\n"
"float32 s\n"
"float32 yaw  # rad\n"
"float32 ks\n"
;
  }

  static const char* value(const ::plan_msgs::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::Path_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plan_msgs::PointSYK_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_PATH_H
