// Generated by gencpp from file plan_msgs/PointSYK.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_POINTSYK_H
#define PLAN_MSGS_MESSAGE_POINTSYK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_msgs
{
template <class ContainerAllocator>
struct PointSYK_
{
  typedef PointSYK_<ContainerAllocator> Type;

  PointSYK_()
    : x(0.0)
    , y(0.0)
    , s(0.0)
    , yaw(0.0)
    , ks(0.0)  {
    }
  PointSYK_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , s(0.0)
    , yaw(0.0)
    , ks(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _s_type;
  _s_type s;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _ks_type;
  _ks_type ks;





  typedef boost::shared_ptr< ::plan_msgs::PointSYK_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::PointSYK_<ContainerAllocator> const> ConstPtr;

}; // struct PointSYK_

typedef ::plan_msgs::PointSYK_<std::allocator<void> > PointSYK;

typedef boost::shared_ptr< ::plan_msgs::PointSYK > PointSYKPtr;
typedef boost::shared_ptr< ::plan_msgs::PointSYK const> PointSYKConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::PointSYK_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::PointSYK_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::PointSYK_<ContainerAllocator1> & lhs, const ::plan_msgs::PointSYK_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.s == rhs.s &&
    lhs.yaw == rhs.yaw &&
    lhs.ks == rhs.ks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::PointSYK_<ContainerAllocator1> & lhs, const ::plan_msgs::PointSYK_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::PointSYK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::PointSYK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::PointSYK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::PointSYK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::PointSYK_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::PointSYK_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::PointSYK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38aea89911d068b911d894eef5ebbb8c";
  }

  static const char* value(const ::plan_msgs::PointSYK_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38aea89911d068b9ULL;
  static const uint64_t static_value2 = 0x11d894eef5ebbb8cULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::PointSYK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/PointSYK";
  }

  static const char* value(const ::plan_msgs::PointSYK_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::PointSYK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 s\n"
"float32 yaw  # rad\n"
"float32 ks\n"
;
  }

  static const char* value(const ::plan_msgs::PointSYK_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::PointSYK_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.s);
      stream.next(m.yaw);
      stream.next(m.ks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointSYK_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::PointSYK_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::PointSYK_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "ks: ";
    Printer<float>::stream(s, indent + "  ", v.ks);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_POINTSYK_H
