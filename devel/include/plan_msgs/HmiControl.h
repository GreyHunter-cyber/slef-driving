// Generated by gencpp from file plan_msgs/HmiControl.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_HMICONTROL_H
#define PLAN_MSGS_MESSAGE_HMICONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_msgs
{
template <class ContainerAllocator>
struct HmiControl_
{
  typedef HmiControl_<ContainerAllocator> Type;

  HmiControl_()
    : stamp()
    , e_stop(0)
    , speed(0.0)
    , ang_velo(0.0)
    , distance(0.0)
    , angle(0.0)
    , control_flag(0)
    , action_flag(0)
    , mition_num(0)
    , mition_point_x()
    , mition_point_y()
    , mition_point_speed()
    , mition_point_a()
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , origin_yaw(0.0)
    , mition_finish(false)  {
    }
  HmiControl_(const ContainerAllocator& _alloc)
    : stamp()
    , e_stop(0)
    , speed(0.0)
    , ang_velo(0.0)
    , distance(0.0)
    , angle(0.0)
    , control_flag(0)
    , action_flag(0)
    , mition_num(0)
    , mition_point_x(_alloc)
    , mition_point_y(_alloc)
    , mition_point_speed(_alloc)
    , mition_point_a(_alloc)
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , origin_yaw(0.0)
    , mition_finish(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _e_stop_type;
  _e_stop_type e_stop;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _ang_velo_type;
  _ang_velo_type ang_velo;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _angle_type;
  _angle_type angle;

   typedef int32_t _control_flag_type;
  _control_flag_type control_flag;

   typedef int32_t _action_flag_type;
  _action_flag_type action_flag;

   typedef int32_t _mition_num_type;
  _mition_num_type mition_num;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mition_point_x_type;
  _mition_point_x_type mition_point_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mition_point_y_type;
  _mition_point_y_type mition_point_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mition_point_speed_type;
  _mition_point_speed_type mition_point_speed;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _mition_point_a_type;
  _mition_point_a_type mition_point_a;

   typedef float _origin_x_type;
  _origin_x_type origin_x;

   typedef float _origin_y_type;
  _origin_y_type origin_y;

   typedef float _origin_z_type;
  _origin_z_type origin_z;

   typedef float _origin_yaw_type;
  _origin_yaw_type origin_yaw;

   typedef uint8_t _mition_finish_type;
  _mition_finish_type mition_finish;





  typedef boost::shared_ptr< ::plan_msgs::HmiControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::HmiControl_<ContainerAllocator> const> ConstPtr;

}; // struct HmiControl_

typedef ::plan_msgs::HmiControl_<std::allocator<void> > HmiControl;

typedef boost::shared_ptr< ::plan_msgs::HmiControl > HmiControlPtr;
typedef boost::shared_ptr< ::plan_msgs::HmiControl const> HmiControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::HmiControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::HmiControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::HmiControl_<ContainerAllocator1> & lhs, const ::plan_msgs::HmiControl_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.e_stop == rhs.e_stop &&
    lhs.speed == rhs.speed &&
    lhs.ang_velo == rhs.ang_velo &&
    lhs.distance == rhs.distance &&
    lhs.angle == rhs.angle &&
    lhs.control_flag == rhs.control_flag &&
    lhs.action_flag == rhs.action_flag &&
    lhs.mition_num == rhs.mition_num &&
    lhs.mition_point_x == rhs.mition_point_x &&
    lhs.mition_point_y == rhs.mition_point_y &&
    lhs.mition_point_speed == rhs.mition_point_speed &&
    lhs.mition_point_a == rhs.mition_point_a &&
    lhs.origin_x == rhs.origin_x &&
    lhs.origin_y == rhs.origin_y &&
    lhs.origin_z == rhs.origin_z &&
    lhs.origin_yaw == rhs.origin_yaw &&
    lhs.mition_finish == rhs.mition_finish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::HmiControl_<ContainerAllocator1> & lhs, const ::plan_msgs::HmiControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::HmiControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::HmiControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::HmiControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::HmiControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::HmiControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::HmiControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::HmiControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd2b29065bf0fb426c0ae55225b9903d";
  }

  static const char* value(const ::plan_msgs::HmiControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd2b29065bf0fb42ULL;
  static const uint64_t static_value2 = 0x6c0ae55225b9903dULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::HmiControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/HmiControl";
  }

  static const char* value(const ::plan_msgs::HmiControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::HmiControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time    stamp             # timestamp\n"
"int32   e_stop            # emergency stop flag\n"
"float32 speed             # speed in m/s\n"
"float32 ang_velo          # turn angle velocity deg/s\n"
"float32 distance          # run distance in m\n"
"float32 angle             # turn angle in degree(L:+/R:-)\n"
"int32   control_flag      # is start the remote control 0 means free ï¼Œ1 means pause ,2 means stop ,3 means remote\n"
"int32   action_flag       # 0 means none ,1 means apply mitionPoint ,2 means navigation,3 reset init location\n"
"int32   mition_num        # mitionPoint number\n"
"float32[] mition_point_x  # mitionPoint x\n"
"float32[] mition_point_y  # mitionPoint y\n"
"float32[] mition_point_speed  # mitionPoint speed\n"
"int32[]   mition_point_a  # mitionPoint attribute\n"
"float32 origin_x\n"
"float32 origin_y\n"
"float32 origin_z\n"
"float32 origin_yaw\n"
"bool mition_finish\n"
;
  }

  static const char* value(const ::plan_msgs::HmiControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::HmiControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.e_stop);
      stream.next(m.speed);
      stream.next(m.ang_velo);
      stream.next(m.distance);
      stream.next(m.angle);
      stream.next(m.control_flag);
      stream.next(m.action_flag);
      stream.next(m.mition_num);
      stream.next(m.mition_point_x);
      stream.next(m.mition_point_y);
      stream.next(m.mition_point_speed);
      stream.next(m.mition_point_a);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
      stream.next(m.origin_z);
      stream.next(m.origin_yaw);
      stream.next(m.mition_finish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HmiControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::HmiControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::HmiControl_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "e_stop: ";
    Printer<int32_t>::stream(s, indent + "  ", v.e_stop);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "ang_velo: ";
    Printer<float>::stream(s, indent + "  ", v.ang_velo);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "control_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_flag);
    s << indent << "action_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_flag);
    s << indent << "mition_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mition_num);
    s << indent << "mition_point_x[]" << std::endl;
    for (size_t i = 0; i < v.mition_point_x.size(); ++i)
    {
      s << indent << "  mition_point_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mition_point_x[i]);
    }
    s << indent << "mition_point_y[]" << std::endl;
    for (size_t i = 0; i < v.mition_point_y.size(); ++i)
    {
      s << indent << "  mition_point_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mition_point_y[i]);
    }
    s << indent << "mition_point_speed[]" << std::endl;
    for (size_t i = 0; i < v.mition_point_speed.size(); ++i)
    {
      s << indent << "  mition_point_speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mition_point_speed[i]);
    }
    s << indent << "mition_point_a[]" << std::endl;
    for (size_t i = 0; i < v.mition_point_a.size(); ++i)
    {
      s << indent << "  mition_point_a[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mition_point_a[i]);
    }
    s << indent << "origin_x: ";
    Printer<float>::stream(s, indent + "  ", v.origin_x);
    s << indent << "origin_y: ";
    Printer<float>::stream(s, indent + "  ", v.origin_y);
    s << indent << "origin_z: ";
    Printer<float>::stream(s, indent + "  ", v.origin_z);
    s << indent << "origin_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.origin_yaw);
    s << indent << "mition_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mition_finish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_HMICONTROL_H
