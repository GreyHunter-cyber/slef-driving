// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_to_server.proto

#ifndef PROTOBUF_robot_5fto_5fserver_2eproto__INCLUDED
#define PROTOBUF_robot_5fto_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_robot_5fto_5fserver_2eproto();
void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

class MPoint;
class R2SDrive;
class R2SMapList;
class R2SMitionPoint;
class R2SMitionStatus;
class R2SOriginPoint;
class R2SRemoteControl;
class R2SRequest;
class R2SResponse;
class R2SRobotInfo;
class R2SRobotMap;
class R2SRobotPos;
class R2SRobotTrail;

enum R2SDrive_Mode {
  R2SDrive_Mode_FREE = 0,
  R2SDrive_Mode_PAUSE = 1,
  R2SDrive_Mode_STOP = 2,
  R2SDrive_Mode_DRIVE = 3
};
bool R2SDrive_Mode_IsValid(int value);
const R2SDrive_Mode R2SDrive_Mode_Mode_MIN = R2SDrive_Mode_FREE;
const R2SDrive_Mode R2SDrive_Mode_Mode_MAX = R2SDrive_Mode_DRIVE;
const int R2SDrive_Mode_Mode_ARRAYSIZE = R2SDrive_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* R2SDrive_Mode_descriptor();
inline const ::std::string& R2SDrive_Mode_Name(R2SDrive_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    R2SDrive_Mode_descriptor(), value);
}
inline bool R2SDrive_Mode_Parse(
    const ::std::string& name, R2SDrive_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<R2SDrive_Mode>(
    R2SDrive_Mode_descriptor(), name, value);
}
enum R2SRobotMap_Grid {
  R2SRobotMap_Grid_UNKOWN = 0,
  R2SRobotMap_Grid_FREE = 1,
  R2SRobotMap_Grid_OCCUPIED = 2,
  R2SRobotMap_Grid_FEATURE = 3
};
bool R2SRobotMap_Grid_IsValid(int value);
const R2SRobotMap_Grid R2SRobotMap_Grid_Grid_MIN = R2SRobotMap_Grid_UNKOWN;
const R2SRobotMap_Grid R2SRobotMap_Grid_Grid_MAX = R2SRobotMap_Grid_FEATURE;
const int R2SRobotMap_Grid_Grid_ARRAYSIZE = R2SRobotMap_Grid_Grid_MAX + 1;

const ::google::protobuf::EnumDescriptor* R2SRobotMap_Grid_descriptor();
inline const ::std::string& R2SRobotMap_Grid_Name(R2SRobotMap_Grid value) {
  return ::google::protobuf::internal::NameOfEnum(
    R2SRobotMap_Grid_descriptor(), value);
}
inline bool R2SRobotMap_Grid_Parse(
    const ::std::string& name, R2SRobotMap_Grid* value) {
  return ::google::protobuf::internal::ParseNamedEnum<R2SRobotMap_Grid>(
    R2SRobotMap_Grid_descriptor(), name, value);
}
enum R2SResponse_Wants {
  R2SResponse_Wants_NONE = 0,
  R2SResponse_Wants_POS = 1,
  R2SResponse_Wants_MAP = 2,
  R2SResponse_Wants_TRAIL = 4
};
bool R2SResponse_Wants_IsValid(int value);
const R2SResponse_Wants R2SResponse_Wants_Wants_MIN = R2SResponse_Wants_NONE;
const R2SResponse_Wants R2SResponse_Wants_Wants_MAX = R2SResponse_Wants_TRAIL;
const int R2SResponse_Wants_Wants_ARRAYSIZE = R2SResponse_Wants_Wants_MAX + 1;

const ::google::protobuf::EnumDescriptor* R2SResponse_Wants_descriptor();
inline const ::std::string& R2SResponse_Wants_Name(R2SResponse_Wants value) {
  return ::google::protobuf::internal::NameOfEnum(
    R2SResponse_Wants_descriptor(), value);
}
inline bool R2SResponse_Wants_Parse(
    const ::std::string& name, R2SResponse_Wants* value) {
  return ::google::protobuf::internal::ParseNamedEnum<R2SResponse_Wants>(
    R2SResponse_Wants_descriptor(), name, value);
}
enum R2SResponse_a_Flag {
  R2SResponse_a_Flag_NOOP = 0,
  R2SResponse_a_Flag_POINT_APPLY = 1,
  R2SResponse_a_Flag_NAVIGATION = 2,
  R2SResponse_a_Flag_INIT_ORIGIN = 3,
  R2SResponse_a_Flag_CREAT_MAP = 4,
  R2SResponse_a_Flag_FINISH_MAP = 5,
  R2SResponse_a_Flag_UPLOAD_MAP = 6,
  R2SResponse_a_Flag_DOWNLOAD_MAP = 7
};
bool R2SResponse_a_Flag_IsValid(int value);
const R2SResponse_a_Flag R2SResponse_a_Flag_a_Flag_MIN = R2SResponse_a_Flag_NOOP;
const R2SResponse_a_Flag R2SResponse_a_Flag_a_Flag_MAX = R2SResponse_a_Flag_DOWNLOAD_MAP;
const int R2SResponse_a_Flag_a_Flag_ARRAYSIZE = R2SResponse_a_Flag_a_Flag_MAX + 1;

const ::google::protobuf::EnumDescriptor* R2SResponse_a_Flag_descriptor();
inline const ::std::string& R2SResponse_a_Flag_Name(R2SResponse_a_Flag value) {
  return ::google::protobuf::internal::NameOfEnum(
    R2SResponse_a_Flag_descriptor(), value);
}
inline bool R2SResponse_a_Flag_Parse(
    const ::std::string& name, R2SResponse_a_Flag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<R2SResponse_a_Flag>(
    R2SResponse_a_Flag_descriptor(), name, value);
}
// ===================================================================

class R2SDrive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SDrive) */ {
 public:
  R2SDrive();
  virtual ~R2SDrive();

  R2SDrive(const R2SDrive& from);

  inline R2SDrive& operator=(const R2SDrive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SDrive& default_instance();

  void Swap(R2SDrive* other);

  // implements Message ----------------------------------------------

  inline R2SDrive* New() const { return New(NULL); }

  R2SDrive* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SDrive& from);
  void MergeFrom(const R2SDrive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SDrive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef R2SDrive_Mode Mode;
  static const Mode FREE =
    R2SDrive_Mode_FREE;
  static const Mode PAUSE =
    R2SDrive_Mode_PAUSE;
  static const Mode STOP =
    R2SDrive_Mode_STOP;
  static const Mode DRIVE =
    R2SDrive_Mode_DRIVE;
  static inline bool Mode_IsValid(int value) {
    return R2SDrive_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    R2SDrive_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    R2SDrive_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    R2SDrive_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return R2SDrive_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return R2SDrive_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return R2SDrive_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .R2SDrive.Mode mode = 1;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::R2SDrive_Mode mode() const;
  void set_mode(::R2SDrive_Mode value);

  // optional float speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  float speed() const;
  void set_speed(float value);

  // optional float angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // @@protoc_insertion_point(class_scope:R2SDrive)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mode_;
  float speed_;
  float angle_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SDrive* default_instance_;
};
// -------------------------------------------------------------------

class MPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MPoint) */ {
 public:
  MPoint();
  virtual ~MPoint();

  MPoint(const MPoint& from);

  inline MPoint& operator=(const MPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MPoint& default_instance();

  void Swap(MPoint* other);

  // implements Message ----------------------------------------------

  inline MPoint* New() const { return New(NULL); }

  MPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MPoint& from);
  void MergeFrom(const MPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required int32 attribute = 3;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  ::google::protobuf::int32 attribute() const;
  void set_attribute(::google::protobuf::int32 value);

  // required float m_speed = 4;
  bool has_m_speed() const;
  void clear_m_speed();
  static const int kMSpeedFieldNumber = 4;
  float m_speed() const;
  void set_m_speed(float value);

  // @@protoc_insertion_point(class_scope:MPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_m_speed();
  inline void clear_has_m_speed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::google::protobuf::int32 attribute_;
  float m_speed_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static MPoint* default_instance_;
};
// -------------------------------------------------------------------

class R2SMitionPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SMitionPoint) */ {
 public:
  R2SMitionPoint();
  virtual ~R2SMitionPoint();

  R2SMitionPoint(const R2SMitionPoint& from);

  inline R2SMitionPoint& operator=(const R2SMitionPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SMitionPoint& default_instance();

  void Swap(R2SMitionPoint* other);

  // implements Message ----------------------------------------------

  inline R2SMitionPoint* New() const { return New(NULL); }

  R2SMitionPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SMitionPoint& from);
  void MergeFrom(const R2SMitionPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SMitionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MPoint point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::MPoint& point(int index) const;
  ::MPoint* mutable_point(int index);
  ::MPoint* add_point();
  ::google::protobuf::RepeatedPtrField< ::MPoint >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::MPoint >&
      point() const;

  // @@protoc_insertion_point(class_scope:R2SMitionPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MPoint > point_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SMitionPoint* default_instance_;
};
// -------------------------------------------------------------------

class R2SOriginPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SOriginPoint) */ {
 public:
  R2SOriginPoint();
  virtual ~R2SOriginPoint();

  R2SOriginPoint(const R2SOriginPoint& from);

  inline R2SOriginPoint& operator=(const R2SOriginPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SOriginPoint& default_instance();

  void Swap(R2SOriginPoint* other);

  // implements Message ----------------------------------------------

  inline R2SOriginPoint* New() const { return New(NULL); }

  R2SOriginPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SOriginPoint& from);
  void MergeFrom(const R2SOriginPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SOriginPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:R2SOriginPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SOriginPoint* default_instance_;
};
// -------------------------------------------------------------------

class R2SRobotMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRobotMap) */ {
 public:
  R2SRobotMap();
  virtual ~R2SRobotMap();

  R2SRobotMap(const R2SRobotMap& from);

  inline R2SRobotMap& operator=(const R2SRobotMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRobotMap& default_instance();

  void Swap(R2SRobotMap* other);

  // implements Message ----------------------------------------------

  inline R2SRobotMap* New() const { return New(NULL); }

  R2SRobotMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRobotMap& from);
  void MergeFrom(const R2SRobotMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRobotMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef R2SRobotMap_Grid Grid;
  static const Grid UNKOWN =
    R2SRobotMap_Grid_UNKOWN;
  static const Grid FREE =
    R2SRobotMap_Grid_FREE;
  static const Grid OCCUPIED =
    R2SRobotMap_Grid_OCCUPIED;
  static const Grid FEATURE =
    R2SRobotMap_Grid_FEATURE;
  static inline bool Grid_IsValid(int value) {
    return R2SRobotMap_Grid_IsValid(value);
  }
  static const Grid Grid_MIN =
    R2SRobotMap_Grid_Grid_MIN;
  static const Grid Grid_MAX =
    R2SRobotMap_Grid_Grid_MAX;
  static const int Grid_ARRAYSIZE =
    R2SRobotMap_Grid_Grid_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Grid_descriptor() {
    return R2SRobotMap_Grid_descriptor();
  }
  static inline const ::std::string& Grid_Name(Grid value) {
    return R2SRobotMap_Grid_Name(value);
  }
  static inline bool Grid_Parse(const ::std::string& name,
      Grid* value) {
    return R2SRobotMap_Grid_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required double origin_x = 1;
  bool has_origin_x() const;
  void clear_origin_x();
  static const int kOriginXFieldNumber = 1;
  double origin_x() const;
  void set_origin_x(double value);

  // required double origin_y = 2;
  bool has_origin_y() const;
  void clear_origin_y();
  static const int kOriginYFieldNumber = 2;
  double origin_y() const;
  void set_origin_y(double value);

  // required int32 size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // required int32 grids_x = 4;
  bool has_grids_x() const;
  void clear_grids_x();
  static const int kGridsXFieldNumber = 4;
  ::google::protobuf::int32 grids_x() const;
  void set_grids_x(::google::protobuf::int32 value);

  // required int32 grids_y = 5;
  bool has_grids_y() const;
  void clear_grids_y();
  static const int kGridsYFieldNumber = 5;
  ::google::protobuf::int32 grids_y() const;
  void set_grids_y(::google::protobuf::int32 value);

  // required bytes zgrids = 6;
  bool has_zgrids() const;
  void clear_zgrids();
  static const int kZgridsFieldNumber = 6;
  const ::std::string& zgrids() const;
  void set_zgrids(const ::std::string& value);
  void set_zgrids(const char* value);
  void set_zgrids(const void* value, size_t size);
  ::std::string* mutable_zgrids();
  ::std::string* release_zgrids();
  void set_allocated_zgrids(::std::string* zgrids);

  // @@protoc_insertion_point(class_scope:R2SRobotMap)
 private:
  inline void set_has_origin_x();
  inline void clear_has_origin_x();
  inline void set_has_origin_y();
  inline void clear_has_origin_y();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_grids_x();
  inline void clear_has_grids_x();
  inline void set_has_grids_y();
  inline void clear_has_grids_y();
  inline void set_has_zgrids();
  inline void clear_has_zgrids();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double origin_x_;
  double origin_y_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 grids_x_;
  ::google::protobuf::internal::ArenaStringPtr zgrids_;
  ::google::protobuf::int32 grids_y_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRobotMap* default_instance_;
};
// -------------------------------------------------------------------

class R2SRobotPos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRobotPos) */ {
 public:
  R2SRobotPos();
  virtual ~R2SRobotPos();

  R2SRobotPos(const R2SRobotPos& from);

  inline R2SRobotPos& operator=(const R2SRobotPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRobotPos& default_instance();

  void Swap(R2SRobotPos* other);

  // implements Message ----------------------------------------------

  inline R2SRobotPos* New() const { return New(NULL); }

  R2SRobotPos* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRobotPos& from);
  void MergeFrom(const R2SRobotPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRobotPos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float offset_x = 1;
  bool has_offset_x() const;
  void clear_offset_x();
  static const int kOffsetXFieldNumber = 1;
  float offset_x() const;
  void set_offset_x(float value);

  // required float offset_y = 2;
  bool has_offset_y() const;
  void clear_offset_y();
  static const int kOffsetYFieldNumber = 2;
  float offset_y() const;
  void set_offset_y(float value);

  // optional float angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // @@protoc_insertion_point(class_scope:R2SRobotPos)
 private:
  inline void set_has_offset_x();
  inline void clear_has_offset_x();
  inline void set_has_offset_y();
  inline void clear_has_offset_y();
  inline void set_has_angle();
  inline void clear_has_angle();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float offset_x_;
  float offset_y_;
  float angle_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRobotPos* default_instance_;
};
// -------------------------------------------------------------------

class R2SRobotTrail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRobotTrail) */ {
 public:
  R2SRobotTrail();
  virtual ~R2SRobotTrail();

  R2SRobotTrail(const R2SRobotTrail& from);

  inline R2SRobotTrail& operator=(const R2SRobotTrail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRobotTrail& default_instance();

  void Swap(R2SRobotTrail* other);

  // implements Message ----------------------------------------------

  inline R2SRobotTrail* New() const { return New(NULL); }

  R2SRobotTrail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRobotTrail& from);
  void MergeFrom(const R2SRobotTrail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRobotTrail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .R2SRobotPos trail = 1;
  int trail_size() const;
  void clear_trail();
  static const int kTrailFieldNumber = 1;
  const ::R2SRobotPos& trail(int index) const;
  ::R2SRobotPos* mutable_trail(int index);
  ::R2SRobotPos* add_trail();
  ::google::protobuf::RepeatedPtrField< ::R2SRobotPos >*
      mutable_trail();
  const ::google::protobuf::RepeatedPtrField< ::R2SRobotPos >&
      trail() const;

  // @@protoc_insertion_point(class_scope:R2SRobotTrail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::R2SRobotPos > trail_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRobotTrail* default_instance_;
};
// -------------------------------------------------------------------

class R2SRobotInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRobotInfo) */ {
 public:
  R2SRobotInfo();
  virtual ~R2SRobotInfo();

  R2SRobotInfo(const R2SRobotInfo& from);

  inline R2SRobotInfo& operator=(const R2SRobotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRobotInfo& default_instance();

  void Swap(R2SRobotInfo* other);

  // implements Message ----------------------------------------------

  inline R2SRobotInfo* New() const { return New(NULL); }

  R2SRobotInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRobotInfo& from);
  void MergeFrom(const R2SRobotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRobotInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  float speed() const;
  void set_speed(float value);

  // required float voltage = 2;
  bool has_voltage() const;
  void clear_voltage();
  static const int kVoltageFieldNumber = 2;
  float voltage() const;
  void set_voltage(float value);

  // required float cur_x = 3;
  bool has_cur_x() const;
  void clear_cur_x();
  static const int kCurXFieldNumber = 3;
  float cur_x() const;
  void set_cur_x(float value);

  // required float cur_y = 4;
  bool has_cur_y() const;
  void clear_cur_y();
  static const int kCurYFieldNumber = 4;
  float cur_y() const;
  void set_cur_y(float value);

  // required float cur_yaw = 5;
  bool has_cur_yaw() const;
  void clear_cur_yaw();
  static const int kCurYawFieldNumber = 5;
  float cur_yaw() const;
  void set_cur_yaw(float value);

  // @@protoc_insertion_point(class_scope:R2SRobotInfo)
 private:
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_cur_x();
  inline void clear_has_cur_x();
  inline void set_has_cur_y();
  inline void clear_has_cur_y();
  inline void set_has_cur_yaw();
  inline void clear_has_cur_yaw();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float speed_;
  float voltage_;
  float cur_x_;
  float cur_y_;
  float cur_yaw_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRobotInfo* default_instance_;
};
// -------------------------------------------------------------------

class R2SMitionStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SMitionStatus) */ {
 public:
  R2SMitionStatus();
  virtual ~R2SMitionStatus();

  R2SMitionStatus(const R2SMitionStatus& from);

  inline R2SMitionStatus& operator=(const R2SMitionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SMitionStatus& default_instance();

  void Swap(R2SMitionStatus* other);

  // implements Message ----------------------------------------------

  inline R2SMitionStatus* New() const { return New(NULL); }

  R2SMitionStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SMitionStatus& from);
  void MergeFrom(const R2SMitionStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SMitionStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mition_number = 1;
  bool has_mition_number() const;
  void clear_mition_number();
  static const int kMitionNumberFieldNumber = 1;
  ::google::protobuf::int32 mition_number() const;
  void set_mition_number(::google::protobuf::int32 value);

  // required bool mition_finish = 2;
  bool has_mition_finish() const;
  void clear_mition_finish();
  static const int kMitionFinishFieldNumber = 2;
  bool mition_finish() const;
  void set_mition_finish(bool value);

  // @@protoc_insertion_point(class_scope:R2SMitionStatus)
 private:
  inline void set_has_mition_number();
  inline void clear_has_mition_number();
  inline void set_has_mition_finish();
  inline void clear_has_mition_finish();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 mition_number_;
  bool mition_finish_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SMitionStatus* default_instance_;
};
// -------------------------------------------------------------------

class R2SRemoteControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRemoteControl) */ {
 public:
  R2SRemoteControl();
  virtual ~R2SRemoteControl();

  R2SRemoteControl(const R2SRemoteControl& from);

  inline R2SRemoteControl& operator=(const R2SRemoteControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRemoteControl& default_instance();

  void Swap(R2SRemoteControl* other);

  // implements Message ----------------------------------------------

  inline R2SRemoteControl* New() const { return New(NULL); }

  R2SRemoteControl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRemoteControl& from);
  void MergeFrom(const R2SRemoteControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRemoteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  float speed() const;
  void set_speed(float value);

  // required float angle = 2;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 2;
  float angle() const;
  void set_angle(float value);

  // optional float angle_velo = 3;
  bool has_angle_velo() const;
  void clear_angle_velo();
  static const int kAngleVeloFieldNumber = 3;
  float angle_velo() const;
  void set_angle_velo(float value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:R2SRemoteControl)
 private:
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_angle_velo();
  inline void clear_has_angle_velo();
  inline void set_has_distance();
  inline void clear_has_distance();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float speed_;
  float angle_;
  float angle_velo_;
  float distance_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRemoteControl* default_instance_;
};
// -------------------------------------------------------------------

class R2SMapList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SMapList) */ {
 public:
  R2SMapList();
  virtual ~R2SMapList();

  R2SMapList(const R2SMapList& from);

  inline R2SMapList& operator=(const R2SMapList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SMapList& default_instance();

  void Swap(R2SMapList* other);

  // implements Message ----------------------------------------------

  inline R2SMapList* New() const { return New(NULL); }

  R2SMapList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SMapList& from);
  void MergeFrom(const R2SMapList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SMapList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mapname = 1;
  int mapname_size() const;
  void clear_mapname();
  static const int kMapnameFieldNumber = 1;
  const ::std::string& mapname(int index) const;
  ::std::string* mutable_mapname(int index);
  void set_mapname(int index, const ::std::string& value);
  void set_mapname(int index, const char* value);
  void set_mapname(int index, const char* value, size_t size);
  ::std::string* add_mapname();
  void add_mapname(const ::std::string& value);
  void add_mapname(const char* value);
  void add_mapname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mapname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mapname();

  // @@protoc_insertion_point(class_scope:R2SMapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mapname_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SMapList* default_instance_;
};
// -------------------------------------------------------------------

class R2SRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SRequest) */ {
 public:
  R2SRequest();
  virtual ~R2SRequest();

  R2SRequest(const R2SRequest& from);

  inline R2SRequest& operator=(const R2SRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SRequest& default_instance();

  void Swap(R2SRequest* other);

  // implements Message ----------------------------------------------

  inline R2SRequest* New() const { return New(NULL); }

  R2SRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SRequest& from);
  void MergeFrom(const R2SRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional int32 upload_rate = 2;
  bool has_upload_rate() const;
  void clear_upload_rate();
  static const int kUploadRateFieldNumber = 2;
  ::google::protobuf::int32 upload_rate() const;
  void set_upload_rate(::google::protobuf::int32 value);

  // optional .R2SRobotPos pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::R2SRobotPos& pos() const;
  ::R2SRobotPos* mutable_pos();
  ::R2SRobotPos* release_pos();
  void set_allocated_pos(::R2SRobotPos* pos);

  // optional .R2SRobotMap map = 4;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 4;
  const ::R2SRobotMap& map() const;
  ::R2SRobotMap* mutable_map();
  ::R2SRobotMap* release_map();
  void set_allocated_map(::R2SRobotMap* map);

  // optional .R2SRobotTrail trail = 5;
  bool has_trail() const;
  void clear_trail();
  static const int kTrailFieldNumber = 5;
  const ::R2SRobotTrail& trail() const;
  ::R2SRobotTrail* mutable_trail();
  ::R2SRobotTrail* release_trail();
  void set_allocated_trail(::R2SRobotTrail* trail);

  // optional .R2SRobotInfo status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const ::R2SRobotInfo& status() const;
  ::R2SRobotInfo* mutable_status();
  ::R2SRobotInfo* release_status();
  void set_allocated_status(::R2SRobotInfo* status);

  // optional .R2SMitionStatus mition = 7;
  bool has_mition() const;
  void clear_mition();
  static const int kMitionFieldNumber = 7;
  const ::R2SMitionStatus& mition() const;
  ::R2SMitionStatus* mutable_mition();
  ::R2SMitionStatus* release_mition();
  void set_allocated_mition(::R2SMitionStatus* mition);

  // optional .R2SMapList list = 8;
  bool has_list() const;
  void clear_list();
  static const int kListFieldNumber = 8;
  const ::R2SMapList& list() const;
  ::R2SMapList* mutable_list();
  ::R2SMapList* release_list();
  void set_allocated_list(::R2SMapList* list);

  // @@protoc_insertion_point(class_scope:R2SRequest)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_upload_rate();
  inline void clear_has_upload_rate();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_trail();
  inline void clear_has_trail();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_mition();
  inline void clear_has_mition();
  inline void set_has_list();
  inline void clear_has_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::R2SRobotPos* pos_;
  ::R2SRobotMap* map_;
  ::R2SRobotTrail* trail_;
  ::R2SRobotInfo* status_;
  ::R2SMitionStatus* mition_;
  ::R2SMapList* list_;
  ::google::protobuf::int32 upload_rate_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SRequest* default_instance_;
};
// -------------------------------------------------------------------

class R2SResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2SResponse) */ {
 public:
  R2SResponse();
  virtual ~R2SResponse();

  R2SResponse(const R2SResponse& from);

  inline R2SResponse& operator=(const R2SResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2SResponse& default_instance();

  void Swap(R2SResponse* other);

  // implements Message ----------------------------------------------

  inline R2SResponse* New() const { return New(NULL); }

  R2SResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R2SResponse& from);
  void MergeFrom(const R2SResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R2SResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef R2SResponse_Wants Wants;
  static const Wants NONE =
    R2SResponse_Wants_NONE;
  static const Wants POS =
    R2SResponse_Wants_POS;
  static const Wants MAP =
    R2SResponse_Wants_MAP;
  static const Wants TRAIL =
    R2SResponse_Wants_TRAIL;
  static inline bool Wants_IsValid(int value) {
    return R2SResponse_Wants_IsValid(value);
  }
  static const Wants Wants_MIN =
    R2SResponse_Wants_Wants_MIN;
  static const Wants Wants_MAX =
    R2SResponse_Wants_Wants_MAX;
  static const int Wants_ARRAYSIZE =
    R2SResponse_Wants_Wants_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Wants_descriptor() {
    return R2SResponse_Wants_descriptor();
  }
  static inline const ::std::string& Wants_Name(Wants value) {
    return R2SResponse_Wants_Name(value);
  }
  static inline bool Wants_Parse(const ::std::string& name,
      Wants* value) {
    return R2SResponse_Wants_Parse(name, value);
  }

  typedef R2SResponse_a_Flag a_Flag;
  static const a_Flag NOOP =
    R2SResponse_a_Flag_NOOP;
  static const a_Flag POINT_APPLY =
    R2SResponse_a_Flag_POINT_APPLY;
  static const a_Flag NAVIGATION =
    R2SResponse_a_Flag_NAVIGATION;
  static const a_Flag INIT_ORIGIN =
    R2SResponse_a_Flag_INIT_ORIGIN;
  static const a_Flag CREAT_MAP =
    R2SResponse_a_Flag_CREAT_MAP;
  static const a_Flag FINISH_MAP =
    R2SResponse_a_Flag_FINISH_MAP;
  static const a_Flag UPLOAD_MAP =
    R2SResponse_a_Flag_UPLOAD_MAP;
  static const a_Flag DOWNLOAD_MAP =
    R2SResponse_a_Flag_DOWNLOAD_MAP;
  static inline bool a_Flag_IsValid(int value) {
    return R2SResponse_a_Flag_IsValid(value);
  }
  static const a_Flag a_Flag_MIN =
    R2SResponse_a_Flag_a_Flag_MIN;
  static const a_Flag a_Flag_MAX =
    R2SResponse_a_Flag_a_Flag_MAX;
  static const int a_Flag_ARRAYSIZE =
    R2SResponse_a_Flag_a_Flag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  a_Flag_descriptor() {
    return R2SResponse_a_Flag_descriptor();
  }
  static inline const ::std::string& a_Flag_Name(a_Flag value) {
    return R2SResponse_a_Flag_Name(value);
  }
  static inline bool a_Flag_Parse(const ::std::string& name,
      a_Flag* value) {
    return R2SResponse_a_Flag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional int32 e_stop = 3;
  bool has_e_stop() const;
  void clear_e_stop();
  static const int kEStopFieldNumber = 3;
  ::google::protobuf::int32 e_stop() const;
  void set_e_stop(::google::protobuf::int32 value);

  // optional .R2SRemoteControl remote = 4;
  bool has_remote() const;
  void clear_remote();
  static const int kRemoteFieldNumber = 4;
  const ::R2SRemoteControl& remote() const;
  ::R2SRemoteControl* mutable_remote();
  ::R2SRemoteControl* release_remote();
  void set_allocated_remote(::R2SRemoteControl* remote);

  // optional int32 c_flag = 5;
  bool has_c_flag() const;
  void clear_c_flag();
  static const int kCFlagFieldNumber = 5;
  ::google::protobuf::int32 c_flag() const;
  void set_c_flag(::google::protobuf::int32 value);

  // optional int32 a_flag = 6;
  bool has_a_flag() const;
  void clear_a_flag();
  static const int kAFlagFieldNumber = 6;
  ::google::protobuf::int32 a_flag() const;
  void set_a_flag(::google::protobuf::int32 value);

  // optional .R2SMitionPoint point = 7;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 7;
  const ::R2SMitionPoint& point() const;
  ::R2SMitionPoint* mutable_point();
  ::R2SMitionPoint* release_point();
  void set_allocated_point(::R2SMitionPoint* point);

  // optional .R2SOriginPoint origin = 8;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 8;
  const ::R2SOriginPoint& origin() const;
  ::R2SOriginPoint* mutable_origin();
  ::R2SOriginPoint* release_origin();
  void set_allocated_origin(::R2SOriginPoint* origin);

  // optional bool mition_f = 9;
  bool has_mition_f() const;
  void clear_mition_f();
  static const int kMitionFFieldNumber = 9;
  bool mition_f() const;
  void set_mition_f(bool value);

  // required int32 wants = 11;
  bool has_wants() const;
  void clear_wants();
  static const int kWantsFieldNumber = 11;
  ::google::protobuf::int32 wants() const;
  void set_wants(::google::protobuf::int32 value);

  // optional string mapname = 12;
  bool has_mapname() const;
  void clear_mapname();
  static const int kMapnameFieldNumber = 12;
  const ::std::string& mapname() const;
  void set_mapname(const ::std::string& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  ::std::string* mutable_mapname();
  ::std::string* release_mapname();
  void set_allocated_mapname(::std::string* mapname);

  // @@protoc_insertion_point(class_scope:R2SResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_e_stop();
  inline void clear_has_e_stop();
  inline void set_has_remote();
  inline void clear_has_remote();
  inline void set_has_c_flag();
  inline void clear_has_c_flag();
  inline void set_has_a_flag();
  inline void clear_has_a_flag();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_mition_f();
  inline void clear_has_mition_f();
  inline void set_has_wants();
  inline void clear_has_wants();
  inline void set_has_mapname();
  inline void clear_has_mapname();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 e_stop_;
  ::R2SRemoteControl* remote_;
  ::google::protobuf::int32 c_flag_;
  ::google::protobuf::int32 a_flag_;
  ::R2SMitionPoint* point_;
  ::R2SOriginPoint* origin_;
  bool mition_f_;
  ::google::protobuf::int32 wants_;
  ::google::protobuf::internal::ArenaStringPtr mapname_;
  friend void  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_AssignDesc_robot_5fto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static R2SResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SDrive

// required .R2SDrive.Mode mode = 1;
inline bool R2SDrive::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SDrive::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SDrive::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SDrive::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::R2SDrive_Mode R2SDrive::mode() const {
  // @@protoc_insertion_point(field_get:R2SDrive.mode)
  return static_cast< ::R2SDrive_Mode >(mode_);
}
inline void R2SDrive::set_mode(::R2SDrive_Mode value) {
  assert(::R2SDrive_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.mode)
}

// optional float speed = 2;
inline bool R2SDrive::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SDrive::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SDrive::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SDrive::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float R2SDrive::speed() const {
  // @@protoc_insertion_point(field_get:R2SDrive.speed)
  return speed_;
}
inline void R2SDrive::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.speed)
}

// optional float angle = 3;
inline bool R2SDrive::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SDrive::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SDrive::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SDrive::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float R2SDrive::angle() const {
  // @@protoc_insertion_point(field_get:R2SDrive.angle)
  return angle_;
}
inline void R2SDrive::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.angle)
}

// -------------------------------------------------------------------

// MPoint

// required float x = 1;
inline bool MPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MPoint::x() const {
  // @@protoc_insertion_point(field_get:MPoint.x)
  return x_;
}
inline void MPoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MPoint.x)
}

// required float y = 2;
inline bool MPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MPoint::y() const {
  // @@protoc_insertion_point(field_get:MPoint.y)
  return y_;
}
inline void MPoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MPoint.y)
}

// required int32 attribute = 3;
inline bool MPoint::has_attribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MPoint::set_has_attribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MPoint::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MPoint::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
inline ::google::protobuf::int32 MPoint::attribute() const {
  // @@protoc_insertion_point(field_get:MPoint.attribute)
  return attribute_;
}
inline void MPoint::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:MPoint.attribute)
}

// required float m_speed = 4;
inline bool MPoint::has_m_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MPoint::set_has_m_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MPoint::clear_has_m_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MPoint::clear_m_speed() {
  m_speed_ = 0;
  clear_has_m_speed();
}
inline float MPoint::m_speed() const {
  // @@protoc_insertion_point(field_get:MPoint.m_speed)
  return m_speed_;
}
inline void MPoint::set_m_speed(float value) {
  set_has_m_speed();
  m_speed_ = value;
  // @@protoc_insertion_point(field_set:MPoint.m_speed)
}

// -------------------------------------------------------------------

// R2SMitionPoint

// repeated .MPoint point = 1;
inline int R2SMitionPoint::point_size() const {
  return point_.size();
}
inline void R2SMitionPoint::clear_point() {
  point_.Clear();
}
inline const ::MPoint& R2SMitionPoint::point(int index) const {
  // @@protoc_insertion_point(field_get:R2SMitionPoint.point)
  return point_.Get(index);
}
inline ::MPoint* R2SMitionPoint::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:R2SMitionPoint.point)
  return point_.Mutable(index);
}
inline ::MPoint* R2SMitionPoint::add_point() {
  // @@protoc_insertion_point(field_add:R2SMitionPoint.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MPoint >*
R2SMitionPoint::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:R2SMitionPoint.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MPoint >&
R2SMitionPoint::point() const {
  // @@protoc_insertion_point(field_list:R2SMitionPoint.point)
  return point_;
}

// -------------------------------------------------------------------

// R2SOriginPoint

// required float x = 1;
inline bool R2SOriginPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SOriginPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SOriginPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SOriginPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float R2SOriginPoint::x() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.x)
  return x_;
}
inline void R2SOriginPoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.x)
}

// required float y = 2;
inline bool R2SOriginPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SOriginPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SOriginPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SOriginPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float R2SOriginPoint::y() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.y)
  return y_;
}
inline void R2SOriginPoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.y)
}

// required float z = 3;
inline bool R2SOriginPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SOriginPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SOriginPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SOriginPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float R2SOriginPoint::z() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.z)
  return z_;
}
inline void R2SOriginPoint::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.z)
}

// -------------------------------------------------------------------

// R2SRobotMap

// required double origin_x = 1;
inline bool R2SRobotMap::has_origin_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SRobotMap::set_has_origin_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SRobotMap::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SRobotMap::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
inline double R2SRobotMap::origin_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.origin_x)
  return origin_x_;
}
inline void R2SRobotMap::set_origin_x(double value) {
  set_has_origin_x();
  origin_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.origin_x)
}

// required double origin_y = 2;
inline bool R2SRobotMap::has_origin_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SRobotMap::set_has_origin_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SRobotMap::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SRobotMap::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
inline double R2SRobotMap::origin_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.origin_y)
  return origin_y_;
}
inline void R2SRobotMap::set_origin_y(double value) {
  set_has_origin_y();
  origin_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.origin_y)
}

// required int32 size = 3;
inline bool R2SRobotMap::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SRobotMap::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SRobotMap::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SRobotMap::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 R2SRobotMap::size() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.size)
  return size_;
}
inline void R2SRobotMap::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.size)
}

// required int32 grids_x = 4;
inline bool R2SRobotMap::has_grids_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2SRobotMap::set_has_grids_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2SRobotMap::clear_has_grids_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2SRobotMap::clear_grids_x() {
  grids_x_ = 0;
  clear_has_grids_x();
}
inline ::google::protobuf::int32 R2SRobotMap::grids_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.grids_x)
  return grids_x_;
}
inline void R2SRobotMap::set_grids_x(::google::protobuf::int32 value) {
  set_has_grids_x();
  grids_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.grids_x)
}

// required int32 grids_y = 5;
inline bool R2SRobotMap::has_grids_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void R2SRobotMap::set_has_grids_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void R2SRobotMap::clear_has_grids_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void R2SRobotMap::clear_grids_y() {
  grids_y_ = 0;
  clear_has_grids_y();
}
inline ::google::protobuf::int32 R2SRobotMap::grids_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.grids_y)
  return grids_y_;
}
inline void R2SRobotMap::set_grids_y(::google::protobuf::int32 value) {
  set_has_grids_y();
  grids_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.grids_y)
}

// required bytes zgrids = 6;
inline bool R2SRobotMap::has_zgrids() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void R2SRobotMap::set_has_zgrids() {
  _has_bits_[0] |= 0x00000020u;
}
inline void R2SRobotMap::clear_has_zgrids() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void R2SRobotMap::clear_zgrids() {
  zgrids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zgrids();
}
inline const ::std::string& R2SRobotMap::zgrids() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.zgrids)
  return zgrids_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SRobotMap::set_zgrids(const ::std::string& value) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SRobotMap.zgrids)
}
inline void R2SRobotMap::set_zgrids(const char* value) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SRobotMap.zgrids)
}
inline void R2SRobotMap::set_zgrids(const void* value, size_t size) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SRobotMap.zgrids)
}
inline ::std::string* R2SRobotMap::mutable_zgrids() {
  set_has_zgrids();
  // @@protoc_insertion_point(field_mutable:R2SRobotMap.zgrids)
  return zgrids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2SRobotMap::release_zgrids() {
  // @@protoc_insertion_point(field_release:R2SRobotMap.zgrids)
  clear_has_zgrids();
  return zgrids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SRobotMap::set_allocated_zgrids(::std::string* zgrids) {
  if (zgrids != NULL) {
    set_has_zgrids();
  } else {
    clear_has_zgrids();
  }
  zgrids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zgrids);
  // @@protoc_insertion_point(field_set_allocated:R2SRobotMap.zgrids)
}

// -------------------------------------------------------------------

// R2SRobotPos

// required float offset_x = 1;
inline bool R2SRobotPos::has_offset_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SRobotPos::set_has_offset_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SRobotPos::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SRobotPos::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
inline float R2SRobotPos::offset_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.offset_x)
  return offset_x_;
}
inline void R2SRobotPos::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.offset_x)
}

// required float offset_y = 2;
inline bool R2SRobotPos::has_offset_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SRobotPos::set_has_offset_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SRobotPos::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SRobotPos::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
inline float R2SRobotPos::offset_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.offset_y)
  return offset_y_;
}
inline void R2SRobotPos::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.offset_y)
}

// optional float angle = 3;
inline bool R2SRobotPos::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SRobotPos::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SRobotPos::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SRobotPos::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float R2SRobotPos::angle() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.angle)
  return angle_;
}
inline void R2SRobotPos::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.angle)
}

// -------------------------------------------------------------------

// R2SRobotTrail

// repeated .R2SRobotPos trail = 1;
inline int R2SRobotTrail::trail_size() const {
  return trail_.size();
}
inline void R2SRobotTrail::clear_trail() {
  trail_.Clear();
}
inline const ::R2SRobotPos& R2SRobotTrail::trail(int index) const {
  // @@protoc_insertion_point(field_get:R2SRobotTrail.trail)
  return trail_.Get(index);
}
inline ::R2SRobotPos* R2SRobotTrail::mutable_trail(int index) {
  // @@protoc_insertion_point(field_mutable:R2SRobotTrail.trail)
  return trail_.Mutable(index);
}
inline ::R2SRobotPos* R2SRobotTrail::add_trail() {
  // @@protoc_insertion_point(field_add:R2SRobotTrail.trail)
  return trail_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::R2SRobotPos >*
R2SRobotTrail::mutable_trail() {
  // @@protoc_insertion_point(field_mutable_list:R2SRobotTrail.trail)
  return &trail_;
}
inline const ::google::protobuf::RepeatedPtrField< ::R2SRobotPos >&
R2SRobotTrail::trail() const {
  // @@protoc_insertion_point(field_list:R2SRobotTrail.trail)
  return trail_;
}

// -------------------------------------------------------------------

// R2SRobotInfo

// required float speed = 1;
inline bool R2SRobotInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SRobotInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SRobotInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SRobotInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float R2SRobotInfo::speed() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.speed)
  return speed_;
}
inline void R2SRobotInfo::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.speed)
}

// required float voltage = 2;
inline bool R2SRobotInfo::has_voltage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SRobotInfo::set_has_voltage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SRobotInfo::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SRobotInfo::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline float R2SRobotInfo::voltage() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.voltage)
  return voltage_;
}
inline void R2SRobotInfo::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.voltage)
}

// required float cur_x = 3;
inline bool R2SRobotInfo::has_cur_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SRobotInfo::set_has_cur_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SRobotInfo::clear_has_cur_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SRobotInfo::clear_cur_x() {
  cur_x_ = 0;
  clear_has_cur_x();
}
inline float R2SRobotInfo::cur_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_x)
  return cur_x_;
}
inline void R2SRobotInfo::set_cur_x(float value) {
  set_has_cur_x();
  cur_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_x)
}

// required float cur_y = 4;
inline bool R2SRobotInfo::has_cur_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2SRobotInfo::set_has_cur_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2SRobotInfo::clear_has_cur_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2SRobotInfo::clear_cur_y() {
  cur_y_ = 0;
  clear_has_cur_y();
}
inline float R2SRobotInfo::cur_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_y)
  return cur_y_;
}
inline void R2SRobotInfo::set_cur_y(float value) {
  set_has_cur_y();
  cur_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_y)
}

// required float cur_yaw = 5;
inline bool R2SRobotInfo::has_cur_yaw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void R2SRobotInfo::set_has_cur_yaw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void R2SRobotInfo::clear_has_cur_yaw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void R2SRobotInfo::clear_cur_yaw() {
  cur_yaw_ = 0;
  clear_has_cur_yaw();
}
inline float R2SRobotInfo::cur_yaw() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_yaw)
  return cur_yaw_;
}
inline void R2SRobotInfo::set_cur_yaw(float value) {
  set_has_cur_yaw();
  cur_yaw_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_yaw)
}

// -------------------------------------------------------------------

// R2SMitionStatus

// required int32 mition_number = 1;
inline bool R2SMitionStatus::has_mition_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SMitionStatus::set_has_mition_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SMitionStatus::clear_has_mition_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SMitionStatus::clear_mition_number() {
  mition_number_ = 0;
  clear_has_mition_number();
}
inline ::google::protobuf::int32 R2SMitionStatus::mition_number() const {
  // @@protoc_insertion_point(field_get:R2SMitionStatus.mition_number)
  return mition_number_;
}
inline void R2SMitionStatus::set_mition_number(::google::protobuf::int32 value) {
  set_has_mition_number();
  mition_number_ = value;
  // @@protoc_insertion_point(field_set:R2SMitionStatus.mition_number)
}

// required bool mition_finish = 2;
inline bool R2SMitionStatus::has_mition_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SMitionStatus::set_has_mition_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SMitionStatus::clear_has_mition_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SMitionStatus::clear_mition_finish() {
  mition_finish_ = false;
  clear_has_mition_finish();
}
inline bool R2SMitionStatus::mition_finish() const {
  // @@protoc_insertion_point(field_get:R2SMitionStatus.mition_finish)
  return mition_finish_;
}
inline void R2SMitionStatus::set_mition_finish(bool value) {
  set_has_mition_finish();
  mition_finish_ = value;
  // @@protoc_insertion_point(field_set:R2SMitionStatus.mition_finish)
}

// -------------------------------------------------------------------

// R2SRemoteControl

// required float speed = 1;
inline bool R2SRemoteControl::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SRemoteControl::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SRemoteControl::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SRemoteControl::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float R2SRemoteControl::speed() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.speed)
  return speed_;
}
inline void R2SRemoteControl::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.speed)
}

// required float angle = 2;
inline bool R2SRemoteControl::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SRemoteControl::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SRemoteControl::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SRemoteControl::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float R2SRemoteControl::angle() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.angle)
  return angle_;
}
inline void R2SRemoteControl::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.angle)
}

// optional float angle_velo = 3;
inline bool R2SRemoteControl::has_angle_velo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SRemoteControl::set_has_angle_velo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SRemoteControl::clear_has_angle_velo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SRemoteControl::clear_angle_velo() {
  angle_velo_ = 0;
  clear_has_angle_velo();
}
inline float R2SRemoteControl::angle_velo() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.angle_velo)
  return angle_velo_;
}
inline void R2SRemoteControl::set_angle_velo(float value) {
  set_has_angle_velo();
  angle_velo_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.angle_velo)
}

// optional float distance = 4;
inline bool R2SRemoteControl::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2SRemoteControl::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2SRemoteControl::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2SRemoteControl::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float R2SRemoteControl::distance() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.distance)
  return distance_;
}
inline void R2SRemoteControl::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.distance)
}

// -------------------------------------------------------------------

// R2SMapList

// repeated string mapname = 1;
inline int R2SMapList::mapname_size() const {
  return mapname_.size();
}
inline void R2SMapList::clear_mapname() {
  mapname_.Clear();
}
inline const ::std::string& R2SMapList::mapname(int index) const {
  // @@protoc_insertion_point(field_get:R2SMapList.mapname)
  return mapname_.Get(index);
}
inline ::std::string* R2SMapList::mutable_mapname(int index) {
  // @@protoc_insertion_point(field_mutable:R2SMapList.mapname)
  return mapname_.Mutable(index);
}
inline void R2SMapList::set_mapname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:R2SMapList.mapname)
  mapname_.Mutable(index)->assign(value);
}
inline void R2SMapList::set_mapname(int index, const char* value) {
  mapname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:R2SMapList.mapname)
}
inline void R2SMapList::set_mapname(int index, const char* value, size_t size) {
  mapname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:R2SMapList.mapname)
}
inline ::std::string* R2SMapList::add_mapname() {
  // @@protoc_insertion_point(field_add_mutable:R2SMapList.mapname)
  return mapname_.Add();
}
inline void R2SMapList::add_mapname(const ::std::string& value) {
  mapname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:R2SMapList.mapname)
}
inline void R2SMapList::add_mapname(const char* value) {
  mapname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:R2SMapList.mapname)
}
inline void R2SMapList::add_mapname(const char* value, size_t size) {
  mapname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:R2SMapList.mapname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
R2SMapList::mapname() const {
  // @@protoc_insertion_point(field_list:R2SMapList.mapname)
  return mapname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
R2SMapList::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable_list:R2SMapList.mapname)
  return &mapname_;
}

// -------------------------------------------------------------------

// R2SRequest

// required bytes token = 1;
inline bool R2SRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& R2SRequest::token() const {
  // @@protoc_insertion_point(field_get:R2SRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SRequest.token)
}
inline void R2SRequest::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SRequest.token)
}
inline void R2SRequest::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SRequest.token)
}
inline ::std::string* R2SRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:R2SRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2SRequest::release_token() {
  // @@protoc_insertion_point(field_release:R2SRequest.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.token)
}

// optional int32 upload_rate = 2;
inline bool R2SRequest::has_upload_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SRequest::set_has_upload_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SRequest::clear_has_upload_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SRequest::clear_upload_rate() {
  upload_rate_ = 0;
  clear_has_upload_rate();
}
inline ::google::protobuf::int32 R2SRequest::upload_rate() const {
  // @@protoc_insertion_point(field_get:R2SRequest.upload_rate)
  return upload_rate_;
}
inline void R2SRequest::set_upload_rate(::google::protobuf::int32 value) {
  set_has_upload_rate();
  upload_rate_ = value;
  // @@protoc_insertion_point(field_set:R2SRequest.upload_rate)
}

// optional .R2SRobotPos pos = 3;
inline bool R2SRequest::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SRequest::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SRequest::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SRequest::clear_pos() {
  if (pos_ != NULL) pos_->::R2SRobotPos::Clear();
  clear_has_pos();
}
inline const ::R2SRobotPos& R2SRequest::pos() const {
  // @@protoc_insertion_point(field_get:R2SRequest.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::R2SRobotPos* R2SRequest::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::R2SRobotPos;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.pos)
  return pos_;
}
inline ::R2SRobotPos* R2SRequest::release_pos() {
  // @@protoc_insertion_point(field_release:R2SRequest.pos)
  clear_has_pos();
  ::R2SRobotPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_pos(::R2SRobotPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.pos)
}

// optional .R2SRobotMap map = 4;
inline bool R2SRequest::has_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2SRequest::set_has_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2SRequest::clear_has_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2SRequest::clear_map() {
  if (map_ != NULL) map_->::R2SRobotMap::Clear();
  clear_has_map();
}
inline const ::R2SRobotMap& R2SRequest::map() const {
  // @@protoc_insertion_point(field_get:R2SRequest.map)
  return map_ != NULL ? *map_ : *default_instance_->map_;
}
inline ::R2SRobotMap* R2SRequest::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::R2SRobotMap;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.map)
  return map_;
}
inline ::R2SRobotMap* R2SRequest::release_map() {
  // @@protoc_insertion_point(field_release:R2SRequest.map)
  clear_has_map();
  ::R2SRobotMap* temp = map_;
  map_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_map(::R2SRobotMap* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.map)
}

// optional .R2SRobotTrail trail = 5;
inline bool R2SRequest::has_trail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void R2SRequest::set_has_trail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void R2SRequest::clear_has_trail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void R2SRequest::clear_trail() {
  if (trail_ != NULL) trail_->::R2SRobotTrail::Clear();
  clear_has_trail();
}
inline const ::R2SRobotTrail& R2SRequest::trail() const {
  // @@protoc_insertion_point(field_get:R2SRequest.trail)
  return trail_ != NULL ? *trail_ : *default_instance_->trail_;
}
inline ::R2SRobotTrail* R2SRequest::mutable_trail() {
  set_has_trail();
  if (trail_ == NULL) {
    trail_ = new ::R2SRobotTrail;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.trail)
  return trail_;
}
inline ::R2SRobotTrail* R2SRequest::release_trail() {
  // @@protoc_insertion_point(field_release:R2SRequest.trail)
  clear_has_trail();
  ::R2SRobotTrail* temp = trail_;
  trail_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_trail(::R2SRobotTrail* trail) {
  delete trail_;
  trail_ = trail;
  if (trail) {
    set_has_trail();
  } else {
    clear_has_trail();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.trail)
}

// optional .R2SRobotInfo status = 6;
inline bool R2SRequest::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void R2SRequest::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void R2SRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void R2SRequest::clear_status() {
  if (status_ != NULL) status_->::R2SRobotInfo::Clear();
  clear_has_status();
}
inline const ::R2SRobotInfo& R2SRequest::status() const {
  // @@protoc_insertion_point(field_get:R2SRequest.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::R2SRobotInfo* R2SRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::R2SRobotInfo;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.status)
  return status_;
}
inline ::R2SRobotInfo* R2SRequest::release_status() {
  // @@protoc_insertion_point(field_release:R2SRequest.status)
  clear_has_status();
  ::R2SRobotInfo* temp = status_;
  status_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_status(::R2SRobotInfo* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.status)
}

// optional .R2SMitionStatus mition = 7;
inline bool R2SRequest::has_mition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void R2SRequest::set_has_mition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void R2SRequest::clear_has_mition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void R2SRequest::clear_mition() {
  if (mition_ != NULL) mition_->::R2SMitionStatus::Clear();
  clear_has_mition();
}
inline const ::R2SMitionStatus& R2SRequest::mition() const {
  // @@protoc_insertion_point(field_get:R2SRequest.mition)
  return mition_ != NULL ? *mition_ : *default_instance_->mition_;
}
inline ::R2SMitionStatus* R2SRequest::mutable_mition() {
  set_has_mition();
  if (mition_ == NULL) {
    mition_ = new ::R2SMitionStatus;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.mition)
  return mition_;
}
inline ::R2SMitionStatus* R2SRequest::release_mition() {
  // @@protoc_insertion_point(field_release:R2SRequest.mition)
  clear_has_mition();
  ::R2SMitionStatus* temp = mition_;
  mition_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_mition(::R2SMitionStatus* mition) {
  delete mition_;
  mition_ = mition;
  if (mition) {
    set_has_mition();
  } else {
    clear_has_mition();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.mition)
}

// optional .R2SMapList list = 8;
inline bool R2SRequest::has_list() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void R2SRequest::set_has_list() {
  _has_bits_[0] |= 0x00000080u;
}
inline void R2SRequest::clear_has_list() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void R2SRequest::clear_list() {
  if (list_ != NULL) list_->::R2SMapList::Clear();
  clear_has_list();
}
inline const ::R2SMapList& R2SRequest::list() const {
  // @@protoc_insertion_point(field_get:R2SRequest.list)
  return list_ != NULL ? *list_ : *default_instance_->list_;
}
inline ::R2SMapList* R2SRequest::mutable_list() {
  set_has_list();
  if (list_ == NULL) {
    list_ = new ::R2SMapList;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.list)
  return list_;
}
inline ::R2SMapList* R2SRequest::release_list() {
  // @@protoc_insertion_point(field_release:R2SRequest.list)
  clear_has_list();
  ::R2SMapList* temp = list_;
  list_ = NULL;
  return temp;
}
inline void R2SRequest::set_allocated_list(::R2SMapList* list) {
  delete list_;
  list_ = list;
  if (list) {
    set_has_list();
  } else {
    clear_has_list();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.list)
}

// -------------------------------------------------------------------

// R2SResponse

// required int32 code = 1;
inline bool R2SResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2SResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2SResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2SResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 R2SResponse::code() const {
  // @@protoc_insertion_point(field_get:R2SResponse.code)
  return code_;
}
inline void R2SResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.code)
}

// optional string info = 2;
inline bool R2SResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2SResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2SResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2SResponse::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& R2SResponse::info() const {
  // @@protoc_insertion_point(field_get:R2SResponse.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SResponse::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SResponse.info)
}
inline void R2SResponse::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SResponse.info)
}
inline void R2SResponse::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SResponse.info)
}
inline ::std::string* R2SResponse::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:R2SResponse.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2SResponse::release_info() {
  // @@protoc_insertion_point(field_release:R2SResponse.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SResponse::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.info)
}

// optional int32 e_stop = 3;
inline bool R2SResponse::has_e_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2SResponse::set_has_e_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2SResponse::clear_has_e_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2SResponse::clear_e_stop() {
  e_stop_ = 0;
  clear_has_e_stop();
}
inline ::google::protobuf::int32 R2SResponse::e_stop() const {
  // @@protoc_insertion_point(field_get:R2SResponse.e_stop)
  return e_stop_;
}
inline void R2SResponse::set_e_stop(::google::protobuf::int32 value) {
  set_has_e_stop();
  e_stop_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.e_stop)
}

// optional .R2SRemoteControl remote = 4;
inline bool R2SResponse::has_remote() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2SResponse::set_has_remote() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2SResponse::clear_has_remote() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2SResponse::clear_remote() {
  if (remote_ != NULL) remote_->::R2SRemoteControl::Clear();
  clear_has_remote();
}
inline const ::R2SRemoteControl& R2SResponse::remote() const {
  // @@protoc_insertion_point(field_get:R2SResponse.remote)
  return remote_ != NULL ? *remote_ : *default_instance_->remote_;
}
inline ::R2SRemoteControl* R2SResponse::mutable_remote() {
  set_has_remote();
  if (remote_ == NULL) {
    remote_ = new ::R2SRemoteControl;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.remote)
  return remote_;
}
inline ::R2SRemoteControl* R2SResponse::release_remote() {
  // @@protoc_insertion_point(field_release:R2SResponse.remote)
  clear_has_remote();
  ::R2SRemoteControl* temp = remote_;
  remote_ = NULL;
  return temp;
}
inline void R2SResponse::set_allocated_remote(::R2SRemoteControl* remote) {
  delete remote_;
  remote_ = remote;
  if (remote) {
    set_has_remote();
  } else {
    clear_has_remote();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.remote)
}

// optional int32 c_flag = 5;
inline bool R2SResponse::has_c_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void R2SResponse::set_has_c_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void R2SResponse::clear_has_c_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void R2SResponse::clear_c_flag() {
  c_flag_ = 0;
  clear_has_c_flag();
}
inline ::google::protobuf::int32 R2SResponse::c_flag() const {
  // @@protoc_insertion_point(field_get:R2SResponse.c_flag)
  return c_flag_;
}
inline void R2SResponse::set_c_flag(::google::protobuf::int32 value) {
  set_has_c_flag();
  c_flag_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.c_flag)
}

// optional int32 a_flag = 6;
inline bool R2SResponse::has_a_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void R2SResponse::set_has_a_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void R2SResponse::clear_has_a_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void R2SResponse::clear_a_flag() {
  a_flag_ = 0;
  clear_has_a_flag();
}
inline ::google::protobuf::int32 R2SResponse::a_flag() const {
  // @@protoc_insertion_point(field_get:R2SResponse.a_flag)
  return a_flag_;
}
inline void R2SResponse::set_a_flag(::google::protobuf::int32 value) {
  set_has_a_flag();
  a_flag_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.a_flag)
}

// optional .R2SMitionPoint point = 7;
inline bool R2SResponse::has_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void R2SResponse::set_has_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void R2SResponse::clear_has_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void R2SResponse::clear_point() {
  if (point_ != NULL) point_->::R2SMitionPoint::Clear();
  clear_has_point();
}
inline const ::R2SMitionPoint& R2SResponse::point() const {
  // @@protoc_insertion_point(field_get:R2SResponse.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::R2SMitionPoint* R2SResponse::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::R2SMitionPoint;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.point)
  return point_;
}
inline ::R2SMitionPoint* R2SResponse::release_point() {
  // @@protoc_insertion_point(field_release:R2SResponse.point)
  clear_has_point();
  ::R2SMitionPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void R2SResponse::set_allocated_point(::R2SMitionPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.point)
}

// optional .R2SOriginPoint origin = 8;
inline bool R2SResponse::has_origin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void R2SResponse::set_has_origin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void R2SResponse::clear_has_origin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void R2SResponse::clear_origin() {
  if (origin_ != NULL) origin_->::R2SOriginPoint::Clear();
  clear_has_origin();
}
inline const ::R2SOriginPoint& R2SResponse::origin() const {
  // @@protoc_insertion_point(field_get:R2SResponse.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::R2SOriginPoint* R2SResponse::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::R2SOriginPoint;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.origin)
  return origin_;
}
inline ::R2SOriginPoint* R2SResponse::release_origin() {
  // @@protoc_insertion_point(field_release:R2SResponse.origin)
  clear_has_origin();
  ::R2SOriginPoint* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void R2SResponse::set_allocated_origin(::R2SOriginPoint* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.origin)
}

// optional bool mition_f = 9;
inline bool R2SResponse::has_mition_f() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void R2SResponse::set_has_mition_f() {
  _has_bits_[0] |= 0x00000100u;
}
inline void R2SResponse::clear_has_mition_f() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void R2SResponse::clear_mition_f() {
  mition_f_ = false;
  clear_has_mition_f();
}
inline bool R2SResponse::mition_f() const {
  // @@protoc_insertion_point(field_get:R2SResponse.mition_f)
  return mition_f_;
}
inline void R2SResponse::set_mition_f(bool value) {
  set_has_mition_f();
  mition_f_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.mition_f)
}

// required int32 wants = 11;
inline bool R2SResponse::has_wants() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void R2SResponse::set_has_wants() {
  _has_bits_[0] |= 0x00000200u;
}
inline void R2SResponse::clear_has_wants() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void R2SResponse::clear_wants() {
  wants_ = 0;
  clear_has_wants();
}
inline ::google::protobuf::int32 R2SResponse::wants() const {
  // @@protoc_insertion_point(field_get:R2SResponse.wants)
  return wants_;
}
inline void R2SResponse::set_wants(::google::protobuf::int32 value) {
  set_has_wants();
  wants_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.wants)
}

// optional string mapname = 12;
inline bool R2SResponse::has_mapname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void R2SResponse::set_has_mapname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void R2SResponse::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void R2SResponse::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapname();
}
inline const ::std::string& R2SResponse::mapname() const {
  // @@protoc_insertion_point(field_get:R2SResponse.mapname)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SResponse::set_mapname(const ::std::string& value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SResponse.mapname)
}
inline void R2SResponse::set_mapname(const char* value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SResponse.mapname)
}
inline void R2SResponse::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SResponse.mapname)
}
inline ::std::string* R2SResponse::mutable_mapname() {
  set_has_mapname();
  // @@protoc_insertion_point(field_mutable:R2SResponse.mapname)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2SResponse::release_mapname() {
  // @@protoc_insertion_point(field_release:R2SResponse.mapname)
  clear_has_mapname();
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2SResponse::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    set_has_mapname();
  } else {
    clear_has_mapname();
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.mapname)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::R2SDrive_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::R2SDrive_Mode>() {
  return ::R2SDrive_Mode_descriptor();
}
template <> struct is_proto_enum< ::R2SRobotMap_Grid> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::R2SRobotMap_Grid>() {
  return ::R2SRobotMap_Grid_descriptor();
}
template <> struct is_proto_enum< ::R2SResponse_Wants> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::R2SResponse_Wants>() {
  return ::R2SResponse_Wants_descriptor();
}
template <> struct is_proto_enum< ::R2SResponse_a_Flag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::R2SResponse_a_Flag>() {
  return ::R2SResponse_a_Flag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_5fto_5fserver_2eproto__INCLUDED
