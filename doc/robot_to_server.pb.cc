// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_to_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot_to_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* R2SDrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SDrive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* R2SDrive_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SMitionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SMitionPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SOriginPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SOriginPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SRobotMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRobotMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* R2SRobotMap_Grid_descriptor_ = NULL;
const ::google::protobuf::Descriptor* R2SRobotPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRobotPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SRobotTrail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRobotTrail_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SRobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRobotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SMitionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SMitionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SRemoteControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRemoteControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SMapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SMapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2SResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2SResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* R2SResponse_Wants_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* R2SResponse_a_Flag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_robot_5fto_5fserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_robot_5fto_5fserver_2eproto() {
  protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robot_to_server.proto");
  GOOGLE_CHECK(file != NULL);
  R2SDrive_descriptor_ = file->message_type(0);
  static const int R2SDrive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SDrive, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SDrive, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SDrive, angle_),
  };
  R2SDrive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SDrive_descriptor_,
      R2SDrive::default_instance_,
      R2SDrive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SDrive, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SDrive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SDrive, _internal_metadata_),
      -1);
  R2SDrive_Mode_descriptor_ = R2SDrive_descriptor_->enum_type(0);
  MPoint_descriptor_ = file->message_type(1);
  static const int MPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, m_speed_),
  };
  MPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MPoint_descriptor_,
      MPoint::default_instance_,
      MPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(MPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPoint, _internal_metadata_),
      -1);
  R2SMitionPoint_descriptor_ = file->message_type(2);
  static const int R2SMitionPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionPoint, point_),
  };
  R2SMitionPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SMitionPoint_descriptor_,
      R2SMitionPoint::default_instance_,
      R2SMitionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SMitionPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionPoint, _internal_metadata_),
      -1);
  R2SOriginPoint_descriptor_ = file->message_type(3);
  static const int R2SOriginPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SOriginPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SOriginPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SOriginPoint, z_),
  };
  R2SOriginPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SOriginPoint_descriptor_,
      R2SOriginPoint::default_instance_,
      R2SOriginPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SOriginPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SOriginPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SOriginPoint, _internal_metadata_),
      -1);
  R2SRobotMap_descriptor_ = file->message_type(4);
  static const int R2SRobotMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, grids_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, grids_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, zgrids_),
  };
  R2SRobotMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRobotMap_descriptor_,
      R2SRobotMap::default_instance_,
      R2SRobotMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRobotMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotMap, _internal_metadata_),
      -1);
  R2SRobotMap_Grid_descriptor_ = R2SRobotMap_descriptor_->enum_type(0);
  R2SRobotPos_descriptor_ = file->message_type(5);
  static const int R2SRobotPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotPos, offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotPos, offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotPos, angle_),
  };
  R2SRobotPos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRobotPos_descriptor_,
      R2SRobotPos::default_instance_,
      R2SRobotPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotPos, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRobotPos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotPos, _internal_metadata_),
      -1);
  R2SRobotTrail_descriptor_ = file->message_type(6);
  static const int R2SRobotTrail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotTrail, trail_),
  };
  R2SRobotTrail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRobotTrail_descriptor_,
      R2SRobotTrail::default_instance_,
      R2SRobotTrail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotTrail, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRobotTrail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotTrail, _internal_metadata_),
      -1);
  R2SRobotInfo_descriptor_ = file->message_type(7);
  static const int R2SRobotInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, cur_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, cur_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, cur_yaw_),
  };
  R2SRobotInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRobotInfo_descriptor_,
      R2SRobotInfo::default_instance_,
      R2SRobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRobotInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRobotInfo, _internal_metadata_),
      -1);
  R2SMitionStatus_descriptor_ = file->message_type(8);
  static const int R2SMitionStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionStatus, mition_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionStatus, mition_finish_),
  };
  R2SMitionStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SMitionStatus_descriptor_,
      R2SMitionStatus::default_instance_,
      R2SMitionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SMitionStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMitionStatus, _internal_metadata_),
      -1);
  R2SRemoteControl_descriptor_ = file->message_type(9);
  static const int R2SRemoteControl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, angle_velo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, distance_),
  };
  R2SRemoteControl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRemoteControl_descriptor_,
      R2SRemoteControl::default_instance_,
      R2SRemoteControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRemoteControl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRemoteControl, _internal_metadata_),
      -1);
  R2SMapList_descriptor_ = file->message_type(10);
  static const int R2SMapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMapList, mapname_),
  };
  R2SMapList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SMapList_descriptor_,
      R2SMapList::default_instance_,
      R2SMapList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMapList, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SMapList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SMapList, _internal_metadata_),
      -1);
  R2SRequest_descriptor_ = file->message_type(11);
  static const int R2SRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, upload_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, trail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, mition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, list_),
  };
  R2SRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SRequest_descriptor_,
      R2SRequest::default_instance_,
      R2SRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SRequest, _internal_metadata_),
      -1);
  R2SResponse_descriptor_ = file->message_type(12);
  static const int R2SResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, e_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, remote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, c_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, a_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, mition_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, wants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, mapname_),
  };
  R2SResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      R2SResponse_descriptor_,
      R2SResponse::default_instance_,
      R2SResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(R2SResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2SResponse, _internal_metadata_),
      -1);
  R2SResponse_Wants_descriptor_ = R2SResponse_descriptor_->enum_type(0);
  R2SResponse_a_Flag_descriptor_ = R2SResponse_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robot_5fto_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SDrive_descriptor_, &R2SDrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MPoint_descriptor_, &MPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SMitionPoint_descriptor_, &R2SMitionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SOriginPoint_descriptor_, &R2SOriginPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRobotMap_descriptor_, &R2SRobotMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRobotPos_descriptor_, &R2SRobotPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRobotTrail_descriptor_, &R2SRobotTrail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRobotInfo_descriptor_, &R2SRobotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SMitionStatus_descriptor_, &R2SMitionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRemoteControl_descriptor_, &R2SRemoteControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SMapList_descriptor_, &R2SMapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SRequest_descriptor_, &R2SRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      R2SResponse_descriptor_, &R2SResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robot_5fto_5fserver_2eproto() {
  delete R2SDrive::default_instance_;
  delete R2SDrive_reflection_;
  delete MPoint::default_instance_;
  delete MPoint_reflection_;
  delete R2SMitionPoint::default_instance_;
  delete R2SMitionPoint_reflection_;
  delete R2SOriginPoint::default_instance_;
  delete R2SOriginPoint_reflection_;
  delete R2SRobotMap::default_instance_;
  delete R2SRobotMap_reflection_;
  delete R2SRobotPos::default_instance_;
  delete R2SRobotPos_reflection_;
  delete R2SRobotTrail::default_instance_;
  delete R2SRobotTrail_reflection_;
  delete R2SRobotInfo::default_instance_;
  delete R2SRobotInfo_reflection_;
  delete R2SMitionStatus::default_instance_;
  delete R2SMitionStatus_reflection_;
  delete R2SRemoteControl::default_instance_;
  delete R2SRemoteControl_reflection_;
  delete R2SMapList::default_instance_;
  delete R2SMapList_reflection_;
  delete R2SRequest::default_instance_;
  delete R2SRequest_reflection_;
  delete R2SResponse::default_instance_;
  delete R2SResponse_reflection_;
}

void protobuf_AddDesc_robot_5fto_5fserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_robot_5fto_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025robot_to_server.proto\"x\n\010R2SDrive\022\034\n\004m"
    "ode\030\001 \002(\0162\016.R2SDrive.Mode\022\r\n\005speed\030\002 \001(\002"
    "\022\r\n\005angle\030\003 \001(\002\"0\n\004Mode\022\010\n\004FREE\020\000\022\t\n\005PAU"
    "SE\020\001\022\010\n\004STOP\020\002\022\t\n\005DRIVE\020\003\"B\n\006MPoint\022\t\n\001x"
    "\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\021\n\tattribute\030\003 \002(\005\022\017\n\007"
    "m_speed\030\004 \002(\002\"(\n\016R2SMitionPoint\022\026\n\005point"
    "\030\001 \003(\0132\007.MPoint\"1\n\016R2SOriginPoint\022\t\n\001x\030\001"
    " \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\252\001\n\013R2SRobotM"
    "ap\022\020\n\010origin_x\030\001 \002(\001\022\020\n\010origin_y\030\002 \002(\001\022\014"
    "\n\004size\030\003 \002(\005\022\017\n\007grids_x\030\004 \002(\005\022\017\n\007grids_y"
    "\030\005 \002(\005\022\016\n\006zgrids\030\006 \002(\014\"7\n\004Grid\022\n\n\006UNKOWN"
    "\020\000\022\010\n\004FREE\020\001\022\014\n\010OCCUPIED\020\002\022\013\n\007FEATURE\020\003\""
    "@\n\013R2SRobotPos\022\020\n\010offset_x\030\001 \002(\002\022\020\n\010offs"
    "et_y\030\002 \002(\002\022\r\n\005angle\030\003 \001(\002\",\n\rR2SRobotTra"
    "il\022\033\n\005trail\030\001 \003(\0132\014.R2SRobotPos\"]\n\014R2SRo"
    "botInfo\022\r\n\005speed\030\001 \002(\002\022\017\n\007voltage\030\002 \002(\002\022"
    "\r\n\005cur_x\030\003 \002(\002\022\r\n\005cur_y\030\004 \002(\002\022\017\n\007cur_yaw"
    "\030\005 \002(\002\"\?\n\017R2SMitionStatus\022\025\n\rmition_numb"
    "er\030\001 \002(\005\022\025\n\rmition_finish\030\002 \002(\010\"V\n\020R2SRe"
    "moteControl\022\r\n\005speed\030\001 \002(\002\022\r\n\005angle\030\002 \002("
    "\002\022\022\n\nangle_velo\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\""
    "\035\n\nR2SMapList\022\017\n\007mapname\030\001 \003(\t\"\341\001\n\nR2SRe"
    "quest\022\r\n\005token\030\001 \002(\014\022\023\n\013upload_rate\030\002 \001("
    "\005\022\031\n\003pos\030\003 \001(\0132\014.R2SRobotPos\022\031\n\003map\030\004 \001("
    "\0132\014.R2SRobotMap\022\035\n\005trail\030\005 \001(\0132\016.R2SRobo"
    "tTrail\022\035\n\006status\030\006 \001(\0132\r.R2SRobotInfo\022 \n"
    "\006mition\030\007 \001(\0132\020.R2SMitionStatus\022\031\n\004list\030"
    "\010 \001(\0132\013.R2SMapList\"\247\003\n\013R2SResponse\022\014\n\004co"
    "de\030\001 \002(\005\022\014\n\004info\030\002 \001(\t\022\016\n\006e_stop\030\003 \001(\005\022!"
    "\n\006remote\030\004 \001(\0132\021.R2SRemoteControl\022\016\n\006c_f"
    "lag\030\005 \001(\005\022\016\n\006a_flag\030\006 \001(\005\022\036\n\005point\030\007 \001(\013"
    "2\017.R2SMitionPoint\022\037\n\006origin\030\010 \001(\0132\017.R2SO"
    "riginPoint\022\020\n\010mition_f\030\t \001(\010\022\r\n\005wants\030\013 "
    "\002(\005\022\017\n\007mapname\030\014 \001(\t\".\n\005Wants\022\010\n\004NONE\020\000\022"
    "\007\n\003POS\020\001\022\007\n\003MAP\020\002\022\t\n\005TRAIL\020\004\"\205\001\n\006a_Flag\022"
    "\010\n\004NOOP\020\000\022\017\n\013POINT_APPLY\020\001\022\016\n\nNAVIGATION"
    "\020\002\022\017\n\013INIT_ORIGIN\020\003\022\r\n\tCREAT_MAP\020\004\022\016\n\nFI"
    "NISH_MAP\020\005\022\016\n\nUPLOAD_MAP\020\006\022\020\n\014DOWNLOAD_M"
    "AP\020\007", 1524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_to_server.proto", &protobuf_RegisterTypes);
  R2SDrive::default_instance_ = new R2SDrive();
  MPoint::default_instance_ = new MPoint();
  R2SMitionPoint::default_instance_ = new R2SMitionPoint();
  R2SOriginPoint::default_instance_ = new R2SOriginPoint();
  R2SRobotMap::default_instance_ = new R2SRobotMap();
  R2SRobotPos::default_instance_ = new R2SRobotPos();
  R2SRobotTrail::default_instance_ = new R2SRobotTrail();
  R2SRobotInfo::default_instance_ = new R2SRobotInfo();
  R2SMitionStatus::default_instance_ = new R2SMitionStatus();
  R2SRemoteControl::default_instance_ = new R2SRemoteControl();
  R2SMapList::default_instance_ = new R2SMapList();
  R2SRequest::default_instance_ = new R2SRequest();
  R2SResponse::default_instance_ = new R2SResponse();
  R2SDrive::default_instance_->InitAsDefaultInstance();
  MPoint::default_instance_->InitAsDefaultInstance();
  R2SMitionPoint::default_instance_->InitAsDefaultInstance();
  R2SOriginPoint::default_instance_->InitAsDefaultInstance();
  R2SRobotMap::default_instance_->InitAsDefaultInstance();
  R2SRobotPos::default_instance_->InitAsDefaultInstance();
  R2SRobotTrail::default_instance_->InitAsDefaultInstance();
  R2SRobotInfo::default_instance_->InitAsDefaultInstance();
  R2SMitionStatus::default_instance_->InitAsDefaultInstance();
  R2SRemoteControl::default_instance_->InitAsDefaultInstance();
  R2SMapList::default_instance_->InitAsDefaultInstance();
  R2SRequest::default_instance_->InitAsDefaultInstance();
  R2SResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_5fto_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_5fto_5fserver_2eproto {
  StaticDescriptorInitializer_robot_5fto_5fserver_2eproto() {
    protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  }
} static_descriptor_initializer_robot_5fto_5fserver_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* R2SDrive_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SDrive_Mode_descriptor_;
}
bool R2SDrive_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2SDrive_Mode R2SDrive::FREE;
const R2SDrive_Mode R2SDrive::PAUSE;
const R2SDrive_Mode R2SDrive::STOP;
const R2SDrive_Mode R2SDrive::DRIVE;
const R2SDrive_Mode R2SDrive::Mode_MIN;
const R2SDrive_Mode R2SDrive::Mode_MAX;
const int R2SDrive::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SDrive::kModeFieldNumber;
const int R2SDrive::kSpeedFieldNumber;
const int R2SDrive::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SDrive::R2SDrive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SDrive)
}

void R2SDrive::InitAsDefaultInstance() {
}

R2SDrive::R2SDrive(const R2SDrive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SDrive)
}

void R2SDrive::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  speed_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SDrive::~R2SDrive() {
  // @@protoc_insertion_point(destructor:R2SDrive)
  SharedDtor();
}

void R2SDrive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SDrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SDrive_descriptor_;
}

const R2SDrive& R2SDrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SDrive* R2SDrive::default_instance_ = NULL;

R2SDrive* R2SDrive::New(::google::protobuf::Arena* arena) const {
  R2SDrive* n = new R2SDrive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SDrive)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SDrive, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SDrive*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mode_, angle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .R2SDrive.Mode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2SDrive_Mode_IsValid(value)) {
            set_mode(static_cast< ::R2SDrive_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_speed;
        break;
      }

      // optional float speed = 2;
      case 2: {
        if (tag == 21) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }

      // optional float angle = 3;
      case 3: {
        if (tag == 29) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SDrive)
  return false;
#undef DO_
}

void R2SDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SDrive)
  // required .R2SDrive.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional float speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // optional float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SDrive)
}

::google::protobuf::uint8* R2SDrive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SDrive)
  // required .R2SDrive.Mode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional float speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // optional float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SDrive)
  return target;
}

int R2SDrive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SDrive)
  int total_size = 0;

  // required .R2SDrive.Mode mode = 1;
  if (has_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional float speed = 2;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SDrive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SDrive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SDrive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SDrive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SDrive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SDrive)
    MergeFrom(*source);
  }
}

void R2SDrive::MergeFrom(const R2SDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SDrive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SDrive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SDrive::CopyFrom(const R2SDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SDrive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void R2SDrive::Swap(R2SDrive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SDrive::InternalSwap(R2SDrive* other) {
  std::swap(mode_, other->mode_);
  std::swap(speed_, other->speed_);
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SDrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SDrive_descriptor_;
  metadata.reflection = R2SDrive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SDrive

// required .R2SDrive.Mode mode = 1;
bool R2SDrive::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SDrive::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SDrive::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SDrive::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::R2SDrive_Mode R2SDrive::mode() const {
  // @@protoc_insertion_point(field_get:R2SDrive.mode)
  return static_cast< ::R2SDrive_Mode >(mode_);
}
 void R2SDrive::set_mode(::R2SDrive_Mode value) {
  assert(::R2SDrive_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.mode)
}

// optional float speed = 2;
bool R2SDrive::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SDrive::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SDrive::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SDrive::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 float R2SDrive::speed() const {
  // @@protoc_insertion_point(field_get:R2SDrive.speed)
  return speed_;
}
 void R2SDrive::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.speed)
}

// optional float angle = 3;
bool R2SDrive::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SDrive::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SDrive::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SDrive::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
 float R2SDrive::angle() const {
  // @@protoc_insertion_point(field_get:R2SDrive.angle)
  return angle_;
}
 void R2SDrive::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SDrive.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPoint::kXFieldNumber;
const int MPoint::kYFieldNumber;
const int MPoint::kAttributeFieldNumber;
const int MPoint::kMSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPoint::MPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPoint)
}

void MPoint::InitAsDefaultInstance() {
}

MPoint::MPoint(const MPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MPoint)
}

void MPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  attribute_ = 0;
  m_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPoint::~MPoint() {
  // @@protoc_insertion_point(destructor:MPoint)
  SharedDtor();
}

void MPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPoint_descriptor_;
}

const MPoint& MPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

MPoint* MPoint::default_instance_ = NULL;

MPoint* MPoint::New(::google::protobuf::Arena* arena) const {
  MPoint* n = new MPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:MPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, m_speed_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attribute;
        break;
      }

      // required int32 attribute = 3;
      case 3: {
        if (tag == 24) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_m_speed;
        break;
      }

      // required float m_speed = 4;
      case 4: {
        if (tag == 37) {
         parse_m_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_speed_)));
          set_has_m_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MPoint)
  return false;
#undef DO_
}

void MPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MPoint)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 attribute = 3;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attribute(), output);
  }

  // required float m_speed = 4;
  if (has_m_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->m_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MPoint)
}

::google::protobuf::uint8* MPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MPoint)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 attribute = 3;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attribute(), target);
  }

  // required float m_speed = 4;
  if (has_m_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->m_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPoint)
  return target;
}

int MPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MPoint)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_attribute()) {
    // required int32 attribute = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attribute());
  }

  if (has_m_speed()) {
    // required float m_speed = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int MPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MPoint)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required int32 attribute = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attribute());

    // required float m_speed = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPoint)
    MergeFrom(*source);
  }
}

void MPoint::MergeFrom(const MPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_m_speed()) {
      set_m_speed(from.m_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPoint::CopyFrom(const MPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MPoint::Swap(MPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPoint::InternalSwap(MPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(attribute_, other->attribute_);
  std::swap(m_speed_, other->m_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPoint_descriptor_;
  metadata.reflection = MPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPoint

// required float x = 1;
bool MPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void MPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void MPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float MPoint::x() const {
  // @@protoc_insertion_point(field_get:MPoint.x)
  return x_;
}
 void MPoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MPoint.x)
}

// required float y = 2;
bool MPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void MPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void MPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float MPoint::y() const {
  // @@protoc_insertion_point(field_get:MPoint.y)
  return y_;
}
 void MPoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MPoint.y)
}

// required int32 attribute = 3;
bool MPoint::has_attribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MPoint::set_has_attribute() {
  _has_bits_[0] |= 0x00000004u;
}
void MPoint::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000004u;
}
void MPoint::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
 ::google::protobuf::int32 MPoint::attribute() const {
  // @@protoc_insertion_point(field_get:MPoint.attribute)
  return attribute_;
}
 void MPoint::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:MPoint.attribute)
}

// required float m_speed = 4;
bool MPoint::has_m_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MPoint::set_has_m_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void MPoint::clear_has_m_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void MPoint::clear_m_speed() {
  m_speed_ = 0;
  clear_has_m_speed();
}
 float MPoint::m_speed() const {
  // @@protoc_insertion_point(field_get:MPoint.m_speed)
  return m_speed_;
}
 void MPoint::set_m_speed(float value) {
  set_has_m_speed();
  m_speed_ = value;
  // @@protoc_insertion_point(field_set:MPoint.m_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SMitionPoint::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SMitionPoint::R2SMitionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SMitionPoint)
}

void R2SMitionPoint::InitAsDefaultInstance() {
}

R2SMitionPoint::R2SMitionPoint(const R2SMitionPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SMitionPoint)
}

void R2SMitionPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SMitionPoint::~R2SMitionPoint() {
  // @@protoc_insertion_point(destructor:R2SMitionPoint)
  SharedDtor();
}

void R2SMitionPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SMitionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SMitionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SMitionPoint_descriptor_;
}

const R2SMitionPoint& R2SMitionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SMitionPoint* R2SMitionPoint::default_instance_ = NULL;

R2SMitionPoint* R2SMitionPoint::New(::google::protobuf::Arena* arena) const {
  R2SMitionPoint* n = new R2SMitionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SMitionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SMitionPoint)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SMitionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SMitionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MPoint point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SMitionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SMitionPoint)
  return false;
#undef DO_
}

void R2SMitionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SMitionPoint)
  // repeated .MPoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SMitionPoint)
}

::google::protobuf::uint8* R2SMitionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SMitionPoint)
  // repeated .MPoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SMitionPoint)
  return target;
}

int R2SMitionPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SMitionPoint)
  int total_size = 0;

  // repeated .MPoint point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SMitionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SMitionPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SMitionPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SMitionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SMitionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SMitionPoint)
    MergeFrom(*source);
  }
}

void R2SMitionPoint::MergeFrom(const R2SMitionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SMitionPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SMitionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SMitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SMitionPoint::CopyFrom(const R2SMitionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SMitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SMitionPoint::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void R2SMitionPoint::Swap(R2SMitionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SMitionPoint::InternalSwap(R2SMitionPoint* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SMitionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SMitionPoint_descriptor_;
  metadata.reflection = R2SMitionPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SMitionPoint

// repeated .MPoint point = 1;
int R2SMitionPoint::point_size() const {
  return point_.size();
}
void R2SMitionPoint::clear_point() {
  point_.Clear();
}
const ::MPoint& R2SMitionPoint::point(int index) const {
  // @@protoc_insertion_point(field_get:R2SMitionPoint.point)
  return point_.Get(index);
}
::MPoint* R2SMitionPoint::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:R2SMitionPoint.point)
  return point_.Mutable(index);
}
::MPoint* R2SMitionPoint::add_point() {
  // @@protoc_insertion_point(field_add:R2SMitionPoint.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::MPoint >*
R2SMitionPoint::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:R2SMitionPoint.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::MPoint >&
R2SMitionPoint::point() const {
  // @@protoc_insertion_point(field_list:R2SMitionPoint.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SOriginPoint::kXFieldNumber;
const int R2SOriginPoint::kYFieldNumber;
const int R2SOriginPoint::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SOriginPoint::R2SOriginPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SOriginPoint)
}

void R2SOriginPoint::InitAsDefaultInstance() {
}

R2SOriginPoint::R2SOriginPoint(const R2SOriginPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SOriginPoint)
}

void R2SOriginPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SOriginPoint::~R2SOriginPoint() {
  // @@protoc_insertion_point(destructor:R2SOriginPoint)
  SharedDtor();
}

void R2SOriginPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SOriginPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SOriginPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SOriginPoint_descriptor_;
}

const R2SOriginPoint& R2SOriginPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SOriginPoint* R2SOriginPoint::default_instance_ = NULL;

R2SOriginPoint* R2SOriginPoint::New(::google::protobuf::Arena* arena) const {
  R2SOriginPoint* n = new R2SOriginPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SOriginPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SOriginPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SOriginPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SOriginPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SOriginPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SOriginPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SOriginPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SOriginPoint)
  return false;
#undef DO_
}

void R2SOriginPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SOriginPoint)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SOriginPoint)
}

::google::protobuf::uint8* R2SOriginPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SOriginPoint)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SOriginPoint)
  return target;
}

int R2SOriginPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SOriginPoint)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int R2SOriginPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SOriginPoint)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SOriginPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SOriginPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SOriginPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SOriginPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SOriginPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SOriginPoint)
    MergeFrom(*source);
  }
}

void R2SOriginPoint::MergeFrom(const R2SOriginPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SOriginPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SOriginPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SOriginPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SOriginPoint::CopyFrom(const R2SOriginPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SOriginPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SOriginPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void R2SOriginPoint::Swap(R2SOriginPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SOriginPoint::InternalSwap(R2SOriginPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SOriginPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SOriginPoint_descriptor_;
  metadata.reflection = R2SOriginPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SOriginPoint

// required float x = 1;
bool R2SOriginPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SOriginPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SOriginPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SOriginPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float R2SOriginPoint::x() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.x)
  return x_;
}
 void R2SOriginPoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.x)
}

// required float y = 2;
bool R2SOriginPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SOriginPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SOriginPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SOriginPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float R2SOriginPoint::y() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.y)
  return y_;
}
 void R2SOriginPoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.y)
}

// required float z = 3;
bool R2SOriginPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SOriginPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SOriginPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SOriginPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float R2SOriginPoint::z() const {
  // @@protoc_insertion_point(field_get:R2SOriginPoint.z)
  return z_;
}
 void R2SOriginPoint::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:R2SOriginPoint.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* R2SRobotMap_Grid_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRobotMap_Grid_descriptor_;
}
bool R2SRobotMap_Grid_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2SRobotMap_Grid R2SRobotMap::UNKOWN;
const R2SRobotMap_Grid R2SRobotMap::FREE;
const R2SRobotMap_Grid R2SRobotMap::OCCUPIED;
const R2SRobotMap_Grid R2SRobotMap::FEATURE;
const R2SRobotMap_Grid R2SRobotMap::Grid_MIN;
const R2SRobotMap_Grid R2SRobotMap::Grid_MAX;
const int R2SRobotMap::Grid_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRobotMap::kOriginXFieldNumber;
const int R2SRobotMap::kOriginYFieldNumber;
const int R2SRobotMap::kSizeFieldNumber;
const int R2SRobotMap::kGridsXFieldNumber;
const int R2SRobotMap::kGridsYFieldNumber;
const int R2SRobotMap::kZgridsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRobotMap::R2SRobotMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRobotMap)
}

void R2SRobotMap::InitAsDefaultInstance() {
}

R2SRobotMap::R2SRobotMap(const R2SRobotMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRobotMap)
}

void R2SRobotMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  origin_x_ = 0;
  origin_y_ = 0;
  size_ = 0;
  grids_x_ = 0;
  grids_y_ = 0;
  zgrids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRobotMap::~R2SRobotMap() {
  // @@protoc_insertion_point(destructor:R2SRobotMap)
  SharedDtor();
}

void R2SRobotMap::SharedDtor() {
  zgrids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void R2SRobotMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRobotMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRobotMap_descriptor_;
}

const R2SRobotMap& R2SRobotMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRobotMap* R2SRobotMap::default_instance_ = NULL;

R2SRobotMap* R2SRobotMap::New(::google::protobuf::Arena* arena) const {
  R2SRobotMap* n = new R2SRobotMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRobotMap::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRobotMap)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SRobotMap, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SRobotMap*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(origin_x_, grids_x_);
    grids_y_ = 0;
    if (has_zgrids()) {
      zgrids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRobotMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRobotMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double origin_x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_x_)));
          set_has_origin_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_origin_y;
        break;
      }

      // required double origin_y = 2;
      case 2: {
        if (tag == 17) {
         parse_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_y_)));
          set_has_origin_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grids_x;
        break;
      }

      // required int32 grids_x = 4;
      case 4: {
        if (tag == 32) {
         parse_grids_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grids_x_)));
          set_has_grids_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_grids_y;
        break;
      }

      // required int32 grids_y = 5;
      case 5: {
        if (tag == 40) {
         parse_grids_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grids_y_)));
          set_has_grids_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_zgrids;
        break;
      }

      // required bytes zgrids = 6;
      case 6: {
        if (tag == 50) {
         parse_zgrids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zgrids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRobotMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRobotMap)
  return false;
#undef DO_
}

void R2SRobotMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRobotMap)
  // required double origin_x = 1;
  if (has_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->origin_x(), output);
  }

  // required double origin_y = 2;
  if (has_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->origin_y(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required int32 grids_x = 4;
  if (has_grids_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grids_x(), output);
  }

  // required int32 grids_y = 5;
  if (has_grids_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grids_y(), output);
  }

  // required bytes zgrids = 6;
  if (has_zgrids()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->zgrids(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRobotMap)
}

::google::protobuf::uint8* R2SRobotMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRobotMap)
  // required double origin_x = 1;
  if (has_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->origin_x(), target);
  }

  // required double origin_y = 2;
  if (has_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->origin_y(), target);
  }

  // required int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // required int32 grids_x = 4;
  if (has_grids_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grids_x(), target);
  }

  // required int32 grids_y = 5;
  if (has_grids_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grids_y(), target);
  }

  // required bytes zgrids = 6;
  if (has_zgrids()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->zgrids(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRobotMap)
  return target;
}

int R2SRobotMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SRobotMap)
  int total_size = 0;

  if (has_origin_x()) {
    // required double origin_x = 1;
    total_size += 1 + 8;
  }

  if (has_origin_y()) {
    // required double origin_y = 2;
    total_size += 1 + 8;
  }

  if (has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (has_grids_x()) {
    // required int32 grids_x = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grids_x());
  }

  if (has_grids_y()) {
    // required int32 grids_y = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grids_y());
  }

  if (has_zgrids()) {
    // required bytes zgrids = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->zgrids());
  }

  return total_size;
}
int R2SRobotMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRobotMap)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double origin_x = 1;
    total_size += 1 + 8;

    // required double origin_y = 2;
    total_size += 1 + 8;

    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

    // required int32 grids_x = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grids_x());

    // required int32 grids_y = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grids_y());

    // required bytes zgrids = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->zgrids());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRobotMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRobotMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRobotMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRobotMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRobotMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRobotMap)
    MergeFrom(*source);
  }
}

void R2SRobotMap::MergeFrom(const R2SRobotMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRobotMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin_x()) {
      set_origin_x(from.origin_x());
    }
    if (from.has_origin_y()) {
      set_origin_y(from.origin_y());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_grids_x()) {
      set_grids_x(from.grids_x());
    }
    if (from.has_grids_y()) {
      set_grids_y(from.grids_y());
    }
    if (from.has_zgrids()) {
      set_has_zgrids();
      zgrids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zgrids_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRobotMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRobotMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRobotMap::CopyFrom(const R2SRobotMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRobotMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRobotMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void R2SRobotMap::Swap(R2SRobotMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRobotMap::InternalSwap(R2SRobotMap* other) {
  std::swap(origin_x_, other->origin_x_);
  std::swap(origin_y_, other->origin_y_);
  std::swap(size_, other->size_);
  std::swap(grids_x_, other->grids_x_);
  std::swap(grids_y_, other->grids_y_);
  zgrids_.Swap(&other->zgrids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRobotMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRobotMap_descriptor_;
  metadata.reflection = R2SRobotMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRobotMap

// required double origin_x = 1;
bool R2SRobotMap::has_origin_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SRobotMap::set_has_origin_x() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SRobotMap::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SRobotMap::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
 double R2SRobotMap::origin_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.origin_x)
  return origin_x_;
}
 void R2SRobotMap::set_origin_x(double value) {
  set_has_origin_x();
  origin_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.origin_x)
}

// required double origin_y = 2;
bool R2SRobotMap::has_origin_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SRobotMap::set_has_origin_y() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SRobotMap::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SRobotMap::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
 double R2SRobotMap::origin_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.origin_y)
  return origin_y_;
}
 void R2SRobotMap::set_origin_y(double value) {
  set_has_origin_y();
  origin_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.origin_y)
}

// required int32 size = 3;
bool R2SRobotMap::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SRobotMap::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SRobotMap::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SRobotMap::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 R2SRobotMap::size() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.size)
  return size_;
}
 void R2SRobotMap::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.size)
}

// required int32 grids_x = 4;
bool R2SRobotMap::has_grids_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2SRobotMap::set_has_grids_x() {
  _has_bits_[0] |= 0x00000008u;
}
void R2SRobotMap::clear_has_grids_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2SRobotMap::clear_grids_x() {
  grids_x_ = 0;
  clear_has_grids_x();
}
 ::google::protobuf::int32 R2SRobotMap::grids_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.grids_x)
  return grids_x_;
}
 void R2SRobotMap::set_grids_x(::google::protobuf::int32 value) {
  set_has_grids_x();
  grids_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.grids_x)
}

// required int32 grids_y = 5;
bool R2SRobotMap::has_grids_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2SRobotMap::set_has_grids_y() {
  _has_bits_[0] |= 0x00000010u;
}
void R2SRobotMap::clear_has_grids_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2SRobotMap::clear_grids_y() {
  grids_y_ = 0;
  clear_has_grids_y();
}
 ::google::protobuf::int32 R2SRobotMap::grids_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.grids_y)
  return grids_y_;
}
 void R2SRobotMap::set_grids_y(::google::protobuf::int32 value) {
  set_has_grids_y();
  grids_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotMap.grids_y)
}

// required bytes zgrids = 6;
bool R2SRobotMap::has_zgrids() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void R2SRobotMap::set_has_zgrids() {
  _has_bits_[0] |= 0x00000020u;
}
void R2SRobotMap::clear_has_zgrids() {
  _has_bits_[0] &= ~0x00000020u;
}
void R2SRobotMap::clear_zgrids() {
  zgrids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zgrids();
}
 const ::std::string& R2SRobotMap::zgrids() const {
  // @@protoc_insertion_point(field_get:R2SRobotMap.zgrids)
  return zgrids_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SRobotMap::set_zgrids(const ::std::string& value) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SRobotMap.zgrids)
}
 void R2SRobotMap::set_zgrids(const char* value) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SRobotMap.zgrids)
}
 void R2SRobotMap::set_zgrids(const void* value, size_t size) {
  set_has_zgrids();
  zgrids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SRobotMap.zgrids)
}
 ::std::string* R2SRobotMap::mutable_zgrids() {
  set_has_zgrids();
  // @@protoc_insertion_point(field_mutable:R2SRobotMap.zgrids)
  return zgrids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* R2SRobotMap::release_zgrids() {
  // @@protoc_insertion_point(field_release:R2SRobotMap.zgrids)
  clear_has_zgrids();
  return zgrids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SRobotMap::set_allocated_zgrids(::std::string* zgrids) {
  if (zgrids != NULL) {
    set_has_zgrids();
  } else {
    clear_has_zgrids();
  }
  zgrids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zgrids);
  // @@protoc_insertion_point(field_set_allocated:R2SRobotMap.zgrids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRobotPos::kOffsetXFieldNumber;
const int R2SRobotPos::kOffsetYFieldNumber;
const int R2SRobotPos::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRobotPos::R2SRobotPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRobotPos)
}

void R2SRobotPos::InitAsDefaultInstance() {
}

R2SRobotPos::R2SRobotPos(const R2SRobotPos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRobotPos)
}

void R2SRobotPos::SharedCtor() {
  _cached_size_ = 0;
  offset_x_ = 0;
  offset_y_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRobotPos::~R2SRobotPos() {
  // @@protoc_insertion_point(destructor:R2SRobotPos)
  SharedDtor();
}

void R2SRobotPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SRobotPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRobotPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRobotPos_descriptor_;
}

const R2SRobotPos& R2SRobotPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRobotPos* R2SRobotPos::default_instance_ = NULL;

R2SRobotPos* R2SRobotPos::New(::google::protobuf::Arena* arena) const {
  R2SRobotPos* n = new R2SRobotPos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRobotPos::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRobotPos)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SRobotPos, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SRobotPos*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(offset_x_, angle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRobotPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRobotPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float offset_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_offset_y;
        break;
      }

      // required float offset_y = 2;
      case 2: {
        if (tag == 21) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }

      // optional float angle = 3;
      case 3: {
        if (tag == 29) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRobotPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRobotPos)
  return false;
#undef DO_
}

void R2SRobotPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRobotPos)
  // required float offset_x = 1;
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset_x(), output);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset_y(), output);
  }

  // optional float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRobotPos)
}

::google::protobuf::uint8* R2SRobotPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRobotPos)
  // required float offset_x = 1;
  if (has_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset_x(), target);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset_y(), target);
  }

  // optional float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRobotPos)
  return target;
}

int R2SRobotPos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SRobotPos)
  int total_size = 0;

  if (has_offset_x()) {
    // required float offset_x = 1;
    total_size += 1 + 4;
  }

  if (has_offset_y()) {
    // required float offset_y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int R2SRobotPos::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRobotPos)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float offset_x = 1;
    total_size += 1 + 4;

    // required float offset_y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float angle = 3;
  if (has_angle()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRobotPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRobotPos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRobotPos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRobotPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRobotPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRobotPos)
    MergeFrom(*source);
  }
}

void R2SRobotPos::MergeFrom(const R2SRobotPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRobotPos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRobotPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRobotPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRobotPos::CopyFrom(const R2SRobotPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRobotPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRobotPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void R2SRobotPos::Swap(R2SRobotPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRobotPos::InternalSwap(R2SRobotPos* other) {
  std::swap(offset_x_, other->offset_x_);
  std::swap(offset_y_, other->offset_y_);
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRobotPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRobotPos_descriptor_;
  metadata.reflection = R2SRobotPos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRobotPos

// required float offset_x = 1;
bool R2SRobotPos::has_offset_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SRobotPos::set_has_offset_x() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SRobotPos::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SRobotPos::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
 float R2SRobotPos::offset_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.offset_x)
  return offset_x_;
}
 void R2SRobotPos::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.offset_x)
}

// required float offset_y = 2;
bool R2SRobotPos::has_offset_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SRobotPos::set_has_offset_y() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SRobotPos::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SRobotPos::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
 float R2SRobotPos::offset_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.offset_y)
  return offset_y_;
}
 void R2SRobotPos::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.offset_y)
}

// optional float angle = 3;
bool R2SRobotPos::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SRobotPos::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SRobotPos::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SRobotPos::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
 float R2SRobotPos::angle() const {
  // @@protoc_insertion_point(field_get:R2SRobotPos.angle)
  return angle_;
}
 void R2SRobotPos::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotPos.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRobotTrail::kTrailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRobotTrail::R2SRobotTrail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRobotTrail)
}

void R2SRobotTrail::InitAsDefaultInstance() {
}

R2SRobotTrail::R2SRobotTrail(const R2SRobotTrail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRobotTrail)
}

void R2SRobotTrail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRobotTrail::~R2SRobotTrail() {
  // @@protoc_insertion_point(destructor:R2SRobotTrail)
  SharedDtor();
}

void R2SRobotTrail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SRobotTrail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRobotTrail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRobotTrail_descriptor_;
}

const R2SRobotTrail& R2SRobotTrail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRobotTrail* R2SRobotTrail::default_instance_ = NULL;

R2SRobotTrail* R2SRobotTrail::New(::google::protobuf::Arena* arena) const {
  R2SRobotTrail* n = new R2SRobotTrail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRobotTrail::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRobotTrail)
  trail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRobotTrail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRobotTrail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .R2SRobotPos trail = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_trail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_trail;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRobotTrail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRobotTrail)
  return false;
#undef DO_
}

void R2SRobotTrail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRobotTrail)
  // repeated .R2SRobotPos trail = 1;
  for (unsigned int i = 0, n = this->trail_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trail(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRobotTrail)
}

::google::protobuf::uint8* R2SRobotTrail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRobotTrail)
  // repeated .R2SRobotPos trail = 1;
  for (unsigned int i = 0, n = this->trail_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trail(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRobotTrail)
  return target;
}

int R2SRobotTrail::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRobotTrail)
  int total_size = 0;

  // repeated .R2SRobotPos trail = 1;
  total_size += 1 * this->trail_size();
  for (int i = 0; i < this->trail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trail(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRobotTrail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRobotTrail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRobotTrail* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRobotTrail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRobotTrail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRobotTrail)
    MergeFrom(*source);
  }
}

void R2SRobotTrail::MergeFrom(const R2SRobotTrail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRobotTrail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trail_.MergeFrom(from.trail_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRobotTrail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRobotTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRobotTrail::CopyFrom(const R2SRobotTrail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRobotTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRobotTrail::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->trail())) return false;
  return true;
}

void R2SRobotTrail::Swap(R2SRobotTrail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRobotTrail::InternalSwap(R2SRobotTrail* other) {
  trail_.UnsafeArenaSwap(&other->trail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRobotTrail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRobotTrail_descriptor_;
  metadata.reflection = R2SRobotTrail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRobotTrail

// repeated .R2SRobotPos trail = 1;
int R2SRobotTrail::trail_size() const {
  return trail_.size();
}
void R2SRobotTrail::clear_trail() {
  trail_.Clear();
}
const ::R2SRobotPos& R2SRobotTrail::trail(int index) const {
  // @@protoc_insertion_point(field_get:R2SRobotTrail.trail)
  return trail_.Get(index);
}
::R2SRobotPos* R2SRobotTrail::mutable_trail(int index) {
  // @@protoc_insertion_point(field_mutable:R2SRobotTrail.trail)
  return trail_.Mutable(index);
}
::R2SRobotPos* R2SRobotTrail::add_trail() {
  // @@protoc_insertion_point(field_add:R2SRobotTrail.trail)
  return trail_.Add();
}
::google::protobuf::RepeatedPtrField< ::R2SRobotPos >*
R2SRobotTrail::mutable_trail() {
  // @@protoc_insertion_point(field_mutable_list:R2SRobotTrail.trail)
  return &trail_;
}
const ::google::protobuf::RepeatedPtrField< ::R2SRobotPos >&
R2SRobotTrail::trail() const {
  // @@protoc_insertion_point(field_list:R2SRobotTrail.trail)
  return trail_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRobotInfo::kSpeedFieldNumber;
const int R2SRobotInfo::kVoltageFieldNumber;
const int R2SRobotInfo::kCurXFieldNumber;
const int R2SRobotInfo::kCurYFieldNumber;
const int R2SRobotInfo::kCurYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRobotInfo::R2SRobotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRobotInfo)
}

void R2SRobotInfo::InitAsDefaultInstance() {
}

R2SRobotInfo::R2SRobotInfo(const R2SRobotInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRobotInfo)
}

void R2SRobotInfo::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  voltage_ = 0;
  cur_x_ = 0;
  cur_y_ = 0;
  cur_yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRobotInfo::~R2SRobotInfo() {
  // @@protoc_insertion_point(destructor:R2SRobotInfo)
  SharedDtor();
}

void R2SRobotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SRobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRobotInfo_descriptor_;
}

const R2SRobotInfo& R2SRobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRobotInfo* R2SRobotInfo::default_instance_ = NULL;

R2SRobotInfo* R2SRobotInfo::New(::google::protobuf::Arena* arena) const {
  R2SRobotInfo* n = new R2SRobotInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRobotInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SRobotInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SRobotInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(speed_, cur_yaw_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRobotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_voltage;
        break;
      }

      // required float voltage = 2;
      case 2: {
        if (tag == 21) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cur_x;
        break;
      }

      // required float cur_x = 3;
      case 3: {
        if (tag == 29) {
         parse_cur_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_x_)));
          set_has_cur_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cur_y;
        break;
      }

      // required float cur_y = 4;
      case 4: {
        if (tag == 37) {
         parse_cur_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_y_)));
          set_has_cur_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cur_yaw;
        break;
      }

      // required float cur_yaw = 5;
      case 5: {
        if (tag == 45) {
         parse_cur_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_yaw_)));
          set_has_cur_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRobotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRobotInfo)
  return false;
#undef DO_
}

void R2SRobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRobotInfo)
  // required float speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float voltage = 2;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->voltage(), output);
  }

  // required float cur_x = 3;
  if (has_cur_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cur_x(), output);
  }

  // required float cur_y = 4;
  if (has_cur_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cur_y(), output);
  }

  // required float cur_yaw = 5;
  if (has_cur_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cur_yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRobotInfo)
}

::google::protobuf::uint8* R2SRobotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRobotInfo)
  // required float speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float voltage = 2;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->voltage(), target);
  }

  // required float cur_x = 3;
  if (has_cur_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cur_x(), target);
  }

  // required float cur_y = 4;
  if (has_cur_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cur_y(), target);
  }

  // required float cur_yaw = 5;
  if (has_cur_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cur_yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRobotInfo)
  return target;
}

int R2SRobotInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SRobotInfo)
  int total_size = 0;

  if (has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (has_voltage()) {
    // required float voltage = 2;
    total_size += 1 + 4;
  }

  if (has_cur_x()) {
    // required float cur_x = 3;
    total_size += 1 + 4;
  }

  if (has_cur_y()) {
    // required float cur_y = 4;
    total_size += 1 + 4;
  }

  if (has_cur_yaw()) {
    // required float cur_yaw = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
int R2SRobotInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRobotInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float voltage = 2;
    total_size += 1 + 4;

    // required float cur_x = 3;
    total_size += 1 + 4;

    // required float cur_y = 4;
    total_size += 1 + 4;

    // required float cur_yaw = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRobotInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRobotInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRobotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRobotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRobotInfo)
    MergeFrom(*source);
  }
}

void R2SRobotInfo::MergeFrom(const R2SRobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRobotInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_cur_x()) {
      set_cur_x(from.cur_x());
    }
    if (from.has_cur_y()) {
      set_cur_y(from.cur_y());
    }
    if (from.has_cur_yaw()) {
      set_cur_yaw(from.cur_yaw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRobotInfo::CopyFrom(const R2SRobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRobotInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void R2SRobotInfo::Swap(R2SRobotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRobotInfo::InternalSwap(R2SRobotInfo* other) {
  std::swap(speed_, other->speed_);
  std::swap(voltage_, other->voltage_);
  std::swap(cur_x_, other->cur_x_);
  std::swap(cur_y_, other->cur_y_);
  std::swap(cur_yaw_, other->cur_yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRobotInfo_descriptor_;
  metadata.reflection = R2SRobotInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRobotInfo

// required float speed = 1;
bool R2SRobotInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SRobotInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SRobotInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SRobotInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 float R2SRobotInfo::speed() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.speed)
  return speed_;
}
 void R2SRobotInfo::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.speed)
}

// required float voltage = 2;
bool R2SRobotInfo::has_voltage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SRobotInfo::set_has_voltage() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SRobotInfo::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SRobotInfo::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
 float R2SRobotInfo::voltage() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.voltage)
  return voltage_;
}
 void R2SRobotInfo::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.voltage)
}

// required float cur_x = 3;
bool R2SRobotInfo::has_cur_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SRobotInfo::set_has_cur_x() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SRobotInfo::clear_has_cur_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SRobotInfo::clear_cur_x() {
  cur_x_ = 0;
  clear_has_cur_x();
}
 float R2SRobotInfo::cur_x() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_x)
  return cur_x_;
}
 void R2SRobotInfo::set_cur_x(float value) {
  set_has_cur_x();
  cur_x_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_x)
}

// required float cur_y = 4;
bool R2SRobotInfo::has_cur_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2SRobotInfo::set_has_cur_y() {
  _has_bits_[0] |= 0x00000008u;
}
void R2SRobotInfo::clear_has_cur_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2SRobotInfo::clear_cur_y() {
  cur_y_ = 0;
  clear_has_cur_y();
}
 float R2SRobotInfo::cur_y() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_y)
  return cur_y_;
}
 void R2SRobotInfo::set_cur_y(float value) {
  set_has_cur_y();
  cur_y_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_y)
}

// required float cur_yaw = 5;
bool R2SRobotInfo::has_cur_yaw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2SRobotInfo::set_has_cur_yaw() {
  _has_bits_[0] |= 0x00000010u;
}
void R2SRobotInfo::clear_has_cur_yaw() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2SRobotInfo::clear_cur_yaw() {
  cur_yaw_ = 0;
  clear_has_cur_yaw();
}
 float R2SRobotInfo::cur_yaw() const {
  // @@protoc_insertion_point(field_get:R2SRobotInfo.cur_yaw)
  return cur_yaw_;
}
 void R2SRobotInfo::set_cur_yaw(float value) {
  set_has_cur_yaw();
  cur_yaw_ = value;
  // @@protoc_insertion_point(field_set:R2SRobotInfo.cur_yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SMitionStatus::kMitionNumberFieldNumber;
const int R2SMitionStatus::kMitionFinishFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SMitionStatus::R2SMitionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SMitionStatus)
}

void R2SMitionStatus::InitAsDefaultInstance() {
}

R2SMitionStatus::R2SMitionStatus(const R2SMitionStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SMitionStatus)
}

void R2SMitionStatus::SharedCtor() {
  _cached_size_ = 0;
  mition_number_ = 0;
  mition_finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SMitionStatus::~R2SMitionStatus() {
  // @@protoc_insertion_point(destructor:R2SMitionStatus)
  SharedDtor();
}

void R2SMitionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SMitionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SMitionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SMitionStatus_descriptor_;
}

const R2SMitionStatus& R2SMitionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SMitionStatus* R2SMitionStatus::default_instance_ = NULL;

R2SMitionStatus* R2SMitionStatus::New(::google::protobuf::Arena* arena) const {
  R2SMitionStatus* n = new R2SMitionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SMitionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SMitionStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SMitionStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SMitionStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mition_number_, mition_finish_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SMitionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SMitionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mition_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mition_number_)));
          set_has_mition_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mition_finish;
        break;
      }

      // required bool mition_finish = 2;
      case 2: {
        if (tag == 16) {
         parse_mition_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mition_finish_)));
          set_has_mition_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SMitionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SMitionStatus)
  return false;
#undef DO_
}

void R2SMitionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SMitionStatus)
  // required int32 mition_number = 1;
  if (has_mition_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mition_number(), output);
  }

  // required bool mition_finish = 2;
  if (has_mition_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mition_finish(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SMitionStatus)
}

::google::protobuf::uint8* R2SMitionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SMitionStatus)
  // required int32 mition_number = 1;
  if (has_mition_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mition_number(), target);
  }

  // required bool mition_finish = 2;
  if (has_mition_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mition_finish(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SMitionStatus)
  return target;
}

int R2SMitionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SMitionStatus)
  int total_size = 0;

  if (has_mition_number()) {
    // required int32 mition_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mition_number());
  }

  if (has_mition_finish()) {
    // required bool mition_finish = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int R2SMitionStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SMitionStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 mition_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mition_number());

    // required bool mition_finish = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SMitionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SMitionStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SMitionStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SMitionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SMitionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SMitionStatus)
    MergeFrom(*source);
  }
}

void R2SMitionStatus::MergeFrom(const R2SMitionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SMitionStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mition_number()) {
      set_mition_number(from.mition_number());
    }
    if (from.has_mition_finish()) {
      set_mition_finish(from.mition_finish());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SMitionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SMitionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SMitionStatus::CopyFrom(const R2SMitionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SMitionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SMitionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void R2SMitionStatus::Swap(R2SMitionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SMitionStatus::InternalSwap(R2SMitionStatus* other) {
  std::swap(mition_number_, other->mition_number_);
  std::swap(mition_finish_, other->mition_finish_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SMitionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SMitionStatus_descriptor_;
  metadata.reflection = R2SMitionStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SMitionStatus

// required int32 mition_number = 1;
bool R2SMitionStatus::has_mition_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SMitionStatus::set_has_mition_number() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SMitionStatus::clear_has_mition_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SMitionStatus::clear_mition_number() {
  mition_number_ = 0;
  clear_has_mition_number();
}
 ::google::protobuf::int32 R2SMitionStatus::mition_number() const {
  // @@protoc_insertion_point(field_get:R2SMitionStatus.mition_number)
  return mition_number_;
}
 void R2SMitionStatus::set_mition_number(::google::protobuf::int32 value) {
  set_has_mition_number();
  mition_number_ = value;
  // @@protoc_insertion_point(field_set:R2SMitionStatus.mition_number)
}

// required bool mition_finish = 2;
bool R2SMitionStatus::has_mition_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SMitionStatus::set_has_mition_finish() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SMitionStatus::clear_has_mition_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SMitionStatus::clear_mition_finish() {
  mition_finish_ = false;
  clear_has_mition_finish();
}
 bool R2SMitionStatus::mition_finish() const {
  // @@protoc_insertion_point(field_get:R2SMitionStatus.mition_finish)
  return mition_finish_;
}
 void R2SMitionStatus::set_mition_finish(bool value) {
  set_has_mition_finish();
  mition_finish_ = value;
  // @@protoc_insertion_point(field_set:R2SMitionStatus.mition_finish)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRemoteControl::kSpeedFieldNumber;
const int R2SRemoteControl::kAngleFieldNumber;
const int R2SRemoteControl::kAngleVeloFieldNumber;
const int R2SRemoteControl::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRemoteControl::R2SRemoteControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRemoteControl)
}

void R2SRemoteControl::InitAsDefaultInstance() {
}

R2SRemoteControl::R2SRemoteControl(const R2SRemoteControl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRemoteControl)
}

void R2SRemoteControl::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  angle_ = 0;
  angle_velo_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRemoteControl::~R2SRemoteControl() {
  // @@protoc_insertion_point(destructor:R2SRemoteControl)
  SharedDtor();
}

void R2SRemoteControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SRemoteControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRemoteControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRemoteControl_descriptor_;
}

const R2SRemoteControl& R2SRemoteControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRemoteControl* R2SRemoteControl::default_instance_ = NULL;

R2SRemoteControl* R2SRemoteControl::New(::google::protobuf::Arena* arena) const {
  R2SRemoteControl* n = new R2SRemoteControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRemoteControl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SRemoteControl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SRemoteControl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speed_, distance_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRemoteControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // required float angle = 2;
      case 2: {
        if (tag == 21) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_velo;
        break;
      }

      // optional float angle_velo = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_velo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_velo_)));
          set_has_angle_velo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_distance;
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (tag == 37) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRemoteControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRemoteControl)
  return false;
#undef DO_
}

void R2SRemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRemoteControl)
  // required float speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // optional float angle_velo = 3;
  if (has_angle_velo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_velo(), output);
  }

  // optional float distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRemoteControl)
}

::google::protobuf::uint8* R2SRemoteControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRemoteControl)
  // required float speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // optional float angle_velo = 3;
  if (has_angle_velo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_velo(), target);
  }

  // optional float distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRemoteControl)
  return target;
}

int R2SRemoteControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SRemoteControl)
  int total_size = 0;

  if (has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (has_angle()) {
    // required float angle = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int R2SRemoteControl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRemoteControl)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float angle = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional float angle_velo = 3;
    if (has_angle_velo()) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRemoteControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRemoteControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRemoteControl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRemoteControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRemoteControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRemoteControl)
    MergeFrom(*source);
  }
}

void R2SRemoteControl::MergeFrom(const R2SRemoteControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRemoteControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_angle_velo()) {
      set_angle_velo(from.angle_velo());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRemoteControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRemoteControl::CopyFrom(const R2SRemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRemoteControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void R2SRemoteControl::Swap(R2SRemoteControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRemoteControl::InternalSwap(R2SRemoteControl* other) {
  std::swap(speed_, other->speed_);
  std::swap(angle_, other->angle_);
  std::swap(angle_velo_, other->angle_velo_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRemoteControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRemoteControl_descriptor_;
  metadata.reflection = R2SRemoteControl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRemoteControl

// required float speed = 1;
bool R2SRemoteControl::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SRemoteControl::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SRemoteControl::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SRemoteControl::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 float R2SRemoteControl::speed() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.speed)
  return speed_;
}
 void R2SRemoteControl::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.speed)
}

// required float angle = 2;
bool R2SRemoteControl::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SRemoteControl::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SRemoteControl::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SRemoteControl::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
 float R2SRemoteControl::angle() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.angle)
  return angle_;
}
 void R2SRemoteControl::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.angle)
}

// optional float angle_velo = 3;
bool R2SRemoteControl::has_angle_velo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SRemoteControl::set_has_angle_velo() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SRemoteControl::clear_has_angle_velo() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SRemoteControl::clear_angle_velo() {
  angle_velo_ = 0;
  clear_has_angle_velo();
}
 float R2SRemoteControl::angle_velo() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.angle_velo)
  return angle_velo_;
}
 void R2SRemoteControl::set_angle_velo(float value) {
  set_has_angle_velo();
  angle_velo_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.angle_velo)
}

// optional float distance = 4;
bool R2SRemoteControl::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2SRemoteControl::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void R2SRemoteControl::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2SRemoteControl::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 float R2SRemoteControl::distance() const {
  // @@protoc_insertion_point(field_get:R2SRemoteControl.distance)
  return distance_;
}
 void R2SRemoteControl::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:R2SRemoteControl.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SMapList::kMapnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SMapList::R2SMapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SMapList)
}

void R2SMapList::InitAsDefaultInstance() {
}

R2SMapList::R2SMapList(const R2SMapList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SMapList)
}

void R2SMapList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SMapList::~R2SMapList() {
  // @@protoc_insertion_point(destructor:R2SMapList)
  SharedDtor();
}

void R2SMapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2SMapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SMapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SMapList_descriptor_;
}

const R2SMapList& R2SMapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SMapList* R2SMapList::default_instance_ = NULL;

R2SMapList* R2SMapList::New(::google::protobuf::Arena* arena) const {
  R2SMapList* n = new R2SMapList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SMapList::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SMapList)
  mapname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SMapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SMapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mapname = 1;
      case 1: {
        if (tag == 10) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname(this->mapname_size() - 1).data(),
            this->mapname(this->mapname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "R2SMapList.mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mapname;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SMapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SMapList)
  return false;
#undef DO_
}

void R2SMapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SMapList)
  // repeated string mapname = 1;
  for (int i = 0; i < this->mapname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname(i).data(), this->mapname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SMapList.mapname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mapname(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SMapList)
}

::google::protobuf::uint8* R2SMapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SMapList)
  // repeated string mapname = 1;
  for (int i = 0; i < this->mapname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname(i).data(), this->mapname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SMapList.mapname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mapname(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SMapList)
  return target;
}

int R2SMapList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SMapList)
  int total_size = 0;

  // repeated string mapname = 1;
  total_size += 1 * this->mapname_size();
  for (int i = 0; i < this->mapname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapname(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SMapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SMapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SMapList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SMapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SMapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SMapList)
    MergeFrom(*source);
  }
}

void R2SMapList::MergeFrom(const R2SMapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SMapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mapname_.MergeFrom(from.mapname_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SMapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SMapList::CopyFrom(const R2SMapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SMapList::IsInitialized() const {

  return true;
}

void R2SMapList::Swap(R2SMapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SMapList::InternalSwap(R2SMapList* other) {
  mapname_.UnsafeArenaSwap(&other->mapname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SMapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SMapList_descriptor_;
  metadata.reflection = R2SMapList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SMapList

// repeated string mapname = 1;
int R2SMapList::mapname_size() const {
  return mapname_.size();
}
void R2SMapList::clear_mapname() {
  mapname_.Clear();
}
 const ::std::string& R2SMapList::mapname(int index) const {
  // @@protoc_insertion_point(field_get:R2SMapList.mapname)
  return mapname_.Get(index);
}
 ::std::string* R2SMapList::mutable_mapname(int index) {
  // @@protoc_insertion_point(field_mutable:R2SMapList.mapname)
  return mapname_.Mutable(index);
}
 void R2SMapList::set_mapname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:R2SMapList.mapname)
  mapname_.Mutable(index)->assign(value);
}
 void R2SMapList::set_mapname(int index, const char* value) {
  mapname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:R2SMapList.mapname)
}
 void R2SMapList::set_mapname(int index, const char* value, size_t size) {
  mapname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:R2SMapList.mapname)
}
 ::std::string* R2SMapList::add_mapname() {
  // @@protoc_insertion_point(field_add_mutable:R2SMapList.mapname)
  return mapname_.Add();
}
 void R2SMapList::add_mapname(const ::std::string& value) {
  mapname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:R2SMapList.mapname)
}
 void R2SMapList::add_mapname(const char* value) {
  mapname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:R2SMapList.mapname)
}
 void R2SMapList::add_mapname(const char* value, size_t size) {
  mapname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:R2SMapList.mapname)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
R2SMapList::mapname() const {
  // @@protoc_insertion_point(field_list:R2SMapList.mapname)
  return mapname_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
R2SMapList::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable_list:R2SMapList.mapname)
  return &mapname_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SRequest::kTokenFieldNumber;
const int R2SRequest::kUploadRateFieldNumber;
const int R2SRequest::kPosFieldNumber;
const int R2SRequest::kMapFieldNumber;
const int R2SRequest::kTrailFieldNumber;
const int R2SRequest::kStatusFieldNumber;
const int R2SRequest::kMitionFieldNumber;
const int R2SRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SRequest::R2SRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SRequest)
}

void R2SRequest::InitAsDefaultInstance() {
  pos_ = const_cast< ::R2SRobotPos*>(&::R2SRobotPos::default_instance());
  map_ = const_cast< ::R2SRobotMap*>(&::R2SRobotMap::default_instance());
  trail_ = const_cast< ::R2SRobotTrail*>(&::R2SRobotTrail::default_instance());
  status_ = const_cast< ::R2SRobotInfo*>(&::R2SRobotInfo::default_instance());
  mition_ = const_cast< ::R2SMitionStatus*>(&::R2SMitionStatus::default_instance());
  list_ = const_cast< ::R2SMapList*>(&::R2SMapList::default_instance());
}

R2SRequest::R2SRequest(const R2SRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SRequest)
}

void R2SRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_rate_ = 0;
  pos_ = NULL;
  map_ = NULL;
  trail_ = NULL;
  status_ = NULL;
  mition_ = NULL;
  list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SRequest::~R2SRequest() {
  // @@protoc_insertion_point(destructor:R2SRequest)
  SharedDtor();
}

void R2SRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pos_;
    delete map_;
    delete trail_;
    delete status_;
    delete mition_;
    delete list_;
  }
}

void R2SRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SRequest_descriptor_;
}

const R2SRequest& R2SRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SRequest* R2SRequest::default_instance_ = NULL;

R2SRequest* R2SRequest::New(::google::protobuf::Arena* arena) const {
  R2SRequest* n = new R2SRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    upload_rate_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::R2SRobotPos::Clear();
    }
    if (has_map()) {
      if (map_ != NULL) map_->::R2SRobotMap::Clear();
    }
    if (has_trail()) {
      if (trail_ != NULL) trail_->::R2SRobotTrail::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::R2SRobotInfo::Clear();
    }
    if (has_mition()) {
      if (mition_ != NULL) mition_->::R2SMitionStatus::Clear();
    }
    if (has_list()) {
      if (list_ != NULL) list_->::R2SMapList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upload_rate;
        break;
      }

      // optional int32 upload_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_rate_)));
          set_has_upload_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .R2SRobotPos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map;
        break;
      }

      // optional .R2SRobotMap map = 4;
      case 4: {
        if (tag == 34) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trail;
        break;
      }

      // optional .R2SRobotTrail trail = 5;
      case 5: {
        if (tag == 42) {
         parse_trail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }

      // optional .R2SRobotInfo status = 6;
      case 6: {
        if (tag == 50) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mition;
        break;
      }

      // optional .R2SMitionStatus mition = 7;
      case 7: {
        if (tag == 58) {
         parse_mition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_list;
        break;
      }

      // optional .R2SMapList list = 8;
      case 8: {
        if (tag == 66) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SRequest)
  return false;
#undef DO_
}

void R2SRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SRequest)
  // required bytes token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->token(), output);
  }

  // optional int32 upload_rate = 2;
  if (has_upload_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_rate(), output);
  }

  // optional .R2SRobotPos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional .R2SRobotMap map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->map_, output);
  }

  // optional .R2SRobotTrail trail = 5;
  if (has_trail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->trail_, output);
  }

  // optional .R2SRobotInfo status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->status_, output);
  }

  // optional .R2SMitionStatus mition = 7;
  if (has_mition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->mition_, output);
  }

  // optional .R2SMapList list = 8;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->list_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SRequest)
}

::google::protobuf::uint8* R2SRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SRequest)
  // required bytes token = 1;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  // optional int32 upload_rate = 2;
  if (has_upload_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_rate(), target);
  }

  // optional .R2SRobotPos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional .R2SRobotMap map = 4;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->map_, false, target);
  }

  // optional .R2SRobotTrail trail = 5;
  if (has_trail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->trail_, false, target);
  }

  // optional .R2SRobotInfo status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->status_, false, target);
  }

  // optional .R2SMitionStatus mition = 7;
  if (has_mition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->mition_, false, target);
  }

  // optional .R2SMapList list = 8;
  if (has_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->list_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SRequest)
  return target;
}

int R2SRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SRequest)
  int total_size = 0;

  // required bytes token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 upload_rate = 2;
    if (has_upload_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_rate());
    }

    // optional .R2SRobotPos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .R2SRobotMap map = 4;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_);
    }

    // optional .R2SRobotTrail trail = 5;
    if (has_trail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trail_);
    }

    // optional .R2SRobotInfo status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional .R2SMitionStatus mition = 7;
    if (has_mition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mition_);
    }

    // optional .R2SMapList list = 8;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SRequest)
    MergeFrom(*source);
  }
}

void R2SRequest::MergeFrom(const R2SRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_upload_rate()) {
      set_upload_rate(from.upload_rate());
    }
    if (from.has_pos()) {
      mutable_pos()->::R2SRobotPos::MergeFrom(from.pos());
    }
    if (from.has_map()) {
      mutable_map()->::R2SRobotMap::MergeFrom(from.map());
    }
    if (from.has_trail()) {
      mutable_trail()->::R2SRobotTrail::MergeFrom(from.trail());
    }
    if (from.has_status()) {
      mutable_status()->::R2SRobotInfo::MergeFrom(from.status());
    }
    if (from.has_mition()) {
      mutable_mition()->::R2SMitionStatus::MergeFrom(from.mition());
    }
    if (from.has_list()) {
      mutable_list()->::R2SMapList::MergeFrom(from.list());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SRequest::CopyFrom(const R2SRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_map()) {
    if (!this->map_->IsInitialized()) return false;
  }
  if (has_trail()) {
    if (!this->trail_->IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  if (has_mition()) {
    if (!this->mition_->IsInitialized()) return false;
  }
  return true;
}

void R2SRequest::Swap(R2SRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SRequest::InternalSwap(R2SRequest* other) {
  token_.Swap(&other->token_);
  std::swap(upload_rate_, other->upload_rate_);
  std::swap(pos_, other->pos_);
  std::swap(map_, other->map_);
  std::swap(trail_, other->trail_);
  std::swap(status_, other->status_);
  std::swap(mition_, other->mition_);
  std::swap(list_, other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SRequest_descriptor_;
  metadata.reflection = R2SRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SRequest

// required bytes token = 1;
bool R2SRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& R2SRequest::token() const {
  // @@protoc_insertion_point(field_get:R2SRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SRequest.token)
}
 void R2SRequest::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SRequest.token)
}
 void R2SRequest::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SRequest.token)
}
 ::std::string* R2SRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:R2SRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* R2SRequest::release_token() {
  // @@protoc_insertion_point(field_release:R2SRequest.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.token)
}

// optional int32 upload_rate = 2;
bool R2SRequest::has_upload_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SRequest::set_has_upload_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SRequest::clear_has_upload_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SRequest::clear_upload_rate() {
  upload_rate_ = 0;
  clear_has_upload_rate();
}
 ::google::protobuf::int32 R2SRequest::upload_rate() const {
  // @@protoc_insertion_point(field_get:R2SRequest.upload_rate)
  return upload_rate_;
}
 void R2SRequest::set_upload_rate(::google::protobuf::int32 value) {
  set_has_upload_rate();
  upload_rate_ = value;
  // @@protoc_insertion_point(field_set:R2SRequest.upload_rate)
}

// optional .R2SRobotPos pos = 3;
bool R2SRequest::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SRequest::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SRequest::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SRequest::clear_pos() {
  if (pos_ != NULL) pos_->::R2SRobotPos::Clear();
  clear_has_pos();
}
const ::R2SRobotPos& R2SRequest::pos() const {
  // @@protoc_insertion_point(field_get:R2SRequest.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::R2SRobotPos* R2SRequest::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::R2SRobotPos;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.pos)
  return pos_;
}
::R2SRobotPos* R2SRequest::release_pos() {
  // @@protoc_insertion_point(field_release:R2SRequest.pos)
  clear_has_pos();
  ::R2SRobotPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_pos(::R2SRobotPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.pos)
}

// optional .R2SRobotMap map = 4;
bool R2SRequest::has_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2SRequest::set_has_map() {
  _has_bits_[0] |= 0x00000008u;
}
void R2SRequest::clear_has_map() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2SRequest::clear_map() {
  if (map_ != NULL) map_->::R2SRobotMap::Clear();
  clear_has_map();
}
const ::R2SRobotMap& R2SRequest::map() const {
  // @@protoc_insertion_point(field_get:R2SRequest.map)
  return map_ != NULL ? *map_ : *default_instance_->map_;
}
::R2SRobotMap* R2SRequest::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::R2SRobotMap;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.map)
  return map_;
}
::R2SRobotMap* R2SRequest::release_map() {
  // @@protoc_insertion_point(field_release:R2SRequest.map)
  clear_has_map();
  ::R2SRobotMap* temp = map_;
  map_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_map(::R2SRobotMap* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.map)
}

// optional .R2SRobotTrail trail = 5;
bool R2SRequest::has_trail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2SRequest::set_has_trail() {
  _has_bits_[0] |= 0x00000010u;
}
void R2SRequest::clear_has_trail() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2SRequest::clear_trail() {
  if (trail_ != NULL) trail_->::R2SRobotTrail::Clear();
  clear_has_trail();
}
const ::R2SRobotTrail& R2SRequest::trail() const {
  // @@protoc_insertion_point(field_get:R2SRequest.trail)
  return trail_ != NULL ? *trail_ : *default_instance_->trail_;
}
::R2SRobotTrail* R2SRequest::mutable_trail() {
  set_has_trail();
  if (trail_ == NULL) {
    trail_ = new ::R2SRobotTrail;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.trail)
  return trail_;
}
::R2SRobotTrail* R2SRequest::release_trail() {
  // @@protoc_insertion_point(field_release:R2SRequest.trail)
  clear_has_trail();
  ::R2SRobotTrail* temp = trail_;
  trail_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_trail(::R2SRobotTrail* trail) {
  delete trail_;
  trail_ = trail;
  if (trail) {
    set_has_trail();
  } else {
    clear_has_trail();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.trail)
}

// optional .R2SRobotInfo status = 6;
bool R2SRequest::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void R2SRequest::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void R2SRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void R2SRequest::clear_status() {
  if (status_ != NULL) status_->::R2SRobotInfo::Clear();
  clear_has_status();
}
const ::R2SRobotInfo& R2SRequest::status() const {
  // @@protoc_insertion_point(field_get:R2SRequest.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::R2SRobotInfo* R2SRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::R2SRobotInfo;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.status)
  return status_;
}
::R2SRobotInfo* R2SRequest::release_status() {
  // @@protoc_insertion_point(field_release:R2SRequest.status)
  clear_has_status();
  ::R2SRobotInfo* temp = status_;
  status_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_status(::R2SRobotInfo* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.status)
}

// optional .R2SMitionStatus mition = 7;
bool R2SRequest::has_mition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void R2SRequest::set_has_mition() {
  _has_bits_[0] |= 0x00000040u;
}
void R2SRequest::clear_has_mition() {
  _has_bits_[0] &= ~0x00000040u;
}
void R2SRequest::clear_mition() {
  if (mition_ != NULL) mition_->::R2SMitionStatus::Clear();
  clear_has_mition();
}
const ::R2SMitionStatus& R2SRequest::mition() const {
  // @@protoc_insertion_point(field_get:R2SRequest.mition)
  return mition_ != NULL ? *mition_ : *default_instance_->mition_;
}
::R2SMitionStatus* R2SRequest::mutable_mition() {
  set_has_mition();
  if (mition_ == NULL) {
    mition_ = new ::R2SMitionStatus;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.mition)
  return mition_;
}
::R2SMitionStatus* R2SRequest::release_mition() {
  // @@protoc_insertion_point(field_release:R2SRequest.mition)
  clear_has_mition();
  ::R2SMitionStatus* temp = mition_;
  mition_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_mition(::R2SMitionStatus* mition) {
  delete mition_;
  mition_ = mition;
  if (mition) {
    set_has_mition();
  } else {
    clear_has_mition();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.mition)
}

// optional .R2SMapList list = 8;
bool R2SRequest::has_list() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void R2SRequest::set_has_list() {
  _has_bits_[0] |= 0x00000080u;
}
void R2SRequest::clear_has_list() {
  _has_bits_[0] &= ~0x00000080u;
}
void R2SRequest::clear_list() {
  if (list_ != NULL) list_->::R2SMapList::Clear();
  clear_has_list();
}
const ::R2SMapList& R2SRequest::list() const {
  // @@protoc_insertion_point(field_get:R2SRequest.list)
  return list_ != NULL ? *list_ : *default_instance_->list_;
}
::R2SMapList* R2SRequest::mutable_list() {
  set_has_list();
  if (list_ == NULL) {
    list_ = new ::R2SMapList;
  }
  // @@protoc_insertion_point(field_mutable:R2SRequest.list)
  return list_;
}
::R2SMapList* R2SRequest::release_list() {
  // @@protoc_insertion_point(field_release:R2SRequest.list)
  clear_has_list();
  ::R2SMapList* temp = list_;
  list_ = NULL;
  return temp;
}
void R2SRequest::set_allocated_list(::R2SMapList* list) {
  delete list_;
  list_ = list;
  if (list) {
    set_has_list();
  } else {
    clear_has_list();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SRequest.list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* R2SResponse_Wants_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SResponse_Wants_descriptor_;
}
bool R2SResponse_Wants_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2SResponse_Wants R2SResponse::NONE;
const R2SResponse_Wants R2SResponse::POS;
const R2SResponse_Wants R2SResponse::MAP;
const R2SResponse_Wants R2SResponse::TRAIL;
const R2SResponse_Wants R2SResponse::Wants_MIN;
const R2SResponse_Wants R2SResponse::Wants_MAX;
const int R2SResponse::Wants_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* R2SResponse_a_Flag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SResponse_a_Flag_descriptor_;
}
bool R2SResponse_a_Flag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2SResponse_a_Flag R2SResponse::NOOP;
const R2SResponse_a_Flag R2SResponse::POINT_APPLY;
const R2SResponse_a_Flag R2SResponse::NAVIGATION;
const R2SResponse_a_Flag R2SResponse::INIT_ORIGIN;
const R2SResponse_a_Flag R2SResponse::CREAT_MAP;
const R2SResponse_a_Flag R2SResponse::FINISH_MAP;
const R2SResponse_a_Flag R2SResponse::UPLOAD_MAP;
const R2SResponse_a_Flag R2SResponse::DOWNLOAD_MAP;
const R2SResponse_a_Flag R2SResponse::a_Flag_MIN;
const R2SResponse_a_Flag R2SResponse::a_Flag_MAX;
const int R2SResponse::a_Flag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2SResponse::kCodeFieldNumber;
const int R2SResponse::kInfoFieldNumber;
const int R2SResponse::kEStopFieldNumber;
const int R2SResponse::kRemoteFieldNumber;
const int R2SResponse::kCFlagFieldNumber;
const int R2SResponse::kAFlagFieldNumber;
const int R2SResponse::kPointFieldNumber;
const int R2SResponse::kOriginFieldNumber;
const int R2SResponse::kMitionFFieldNumber;
const int R2SResponse::kWantsFieldNumber;
const int R2SResponse::kMapnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2SResponse::R2SResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2SResponse)
}

void R2SResponse::InitAsDefaultInstance() {
  remote_ = const_cast< ::R2SRemoteControl*>(&::R2SRemoteControl::default_instance());
  point_ = const_cast< ::R2SMitionPoint*>(&::R2SMitionPoint::default_instance());
  origin_ = const_cast< ::R2SOriginPoint*>(&::R2SOriginPoint::default_instance());
}

R2SResponse::R2SResponse(const R2SResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2SResponse)
}

void R2SResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_stop_ = 0;
  remote_ = NULL;
  c_flag_ = 0;
  a_flag_ = 0;
  point_ = NULL;
  origin_ = NULL;
  mition_f_ = false;
  wants_ = 0;
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2SResponse::~R2SResponse() {
  // @@protoc_insertion_point(destructor:R2SResponse)
  SharedDtor();
}

void R2SResponse::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete remote_;
    delete point_;
    delete origin_;
  }
}

void R2SResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2SResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2SResponse_descriptor_;
}

const R2SResponse& R2SResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fto_5fserver_2eproto();
  return *default_instance_;
}

R2SResponse* R2SResponse::default_instance_ = NULL;

R2SResponse* R2SResponse::New(::google::protobuf::Arena* arena) const {
  R2SResponse* n = new R2SResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2SResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:R2SResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(R2SResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<R2SResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(code_, e_stop_);
    ZR_(c_flag_, a_flag_);
    if (has_info()) {
      info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_remote()) {
      if (remote_ != NULL) remote_->::R2SRemoteControl::Clear();
    }
    if (has_point()) {
      if (point_ != NULL) point_->::R2SMitionPoint::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::R2SOriginPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(mition_f_, wants_);
    if (has_mapname()) {
      mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool R2SResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2SResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "R2SResponse.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_e_stop;
        break;
      }

      // optional int32 e_stop = 3;
      case 3: {
        if (tag == 24) {
         parse_e_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_stop_)));
          set_has_e_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remote;
        break;
      }

      // optional .R2SRemoteControl remote = 4;
      case 4: {
        if (tag == 34) {
         parse_remote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_c_flag;
        break;
      }

      // optional int32 c_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_c_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_flag_)));
          set_has_c_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_a_flag;
        break;
      }

      // optional int32 a_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_a_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_flag_)));
          set_has_a_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_point;
        break;
      }

      // optional .R2SMitionPoint point = 7;
      case 7: {
        if (tag == 58) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_origin;
        break;
      }

      // optional .R2SOriginPoint origin = 8;
      case 8: {
        if (tag == 66) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mition_f;
        break;
      }

      // optional bool mition_f = 9;
      case 9: {
        if (tag == 72) {
         parse_mition_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mition_f_)));
          set_has_mition_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wants;
        break;
      }

      // required int32 wants = 11;
      case 11: {
        if (tag == 88) {
         parse_wants:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wants_)));
          set_has_wants();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mapname;
        break;
      }

      // optional string mapname = 12;
      case 12: {
        if (tag == 98) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "R2SResponse.mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2SResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2SResponse)
  return false;
#undef DO_
}

void R2SResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2SResponse)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SResponse.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  // optional int32 e_stop = 3;
  if (has_e_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->e_stop(), output);
  }

  // optional .R2SRemoteControl remote = 4;
  if (has_remote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->remote_, output);
  }

  // optional int32 c_flag = 5;
  if (has_c_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->c_flag(), output);
  }

  // optional int32 a_flag = 6;
  if (has_a_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a_flag(), output);
  }

  // optional .R2SMitionPoint point = 7;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->point_, output);
  }

  // optional .R2SOriginPoint origin = 8;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->origin_, output);
  }

  // optional bool mition_f = 9;
  if (has_mition_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->mition_f(), output);
  }

  // required int32 wants = 11;
  if (has_wants()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wants(), output);
  }

  // optional string mapname = 12;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SResponse.mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->mapname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2SResponse)
}

::google::protobuf::uint8* R2SResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2SResponse)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SResponse.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // optional int32 e_stop = 3;
  if (has_e_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->e_stop(), target);
  }

  // optional .R2SRemoteControl remote = 4;
  if (has_remote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->remote_, false, target);
  }

  // optional int32 c_flag = 5;
  if (has_c_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->c_flag(), target);
  }

  // optional int32 a_flag = 6;
  if (has_a_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a_flag(), target);
  }

  // optional .R2SMitionPoint point = 7;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->point_, false, target);
  }

  // optional .R2SOriginPoint origin = 8;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->origin_, false, target);
  }

  // optional bool mition_f = 9;
  if (has_mition_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->mition_f(), target);
  }

  // required int32 wants = 11;
  if (has_wants()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wants(), target);
  }

  // optional string mapname = 12;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2SResponse.mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->mapname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2SResponse)
  return target;
}

int R2SResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:R2SResponse)
  int total_size = 0;

  if (has_code()) {
    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  if (has_wants()) {
    // required int32 wants = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wants());
  }

  return total_size;
}
int R2SResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:R2SResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000201) ^ 0x00000201) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

    // required int32 wants = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wants());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 e_stop = 3;
    if (has_e_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e_stop());
    }

    // optional .R2SRemoteControl remote = 4;
    if (has_remote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remote_);
    }

    // optional int32 c_flag = 5;
    if (has_c_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c_flag());
    }

    // optional int32 a_flag = 6;
    if (has_a_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a_flag());
    }

    // optional .R2SMitionPoint point = 7;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->point_);
    }

    // optional .R2SOriginPoint origin = 8;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

  }
  if (_has_bits_[8 / 32] & 1280u) {
    // optional bool mition_f = 9;
    if (has_mition_f()) {
      total_size += 1 + 1;
    }

    // optional string mapname = 12;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2SResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2SResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const R2SResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const R2SResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2SResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2SResponse)
    MergeFrom(*source);
  }
}

void R2SResponse::MergeFrom(const R2SResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2SResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (from.has_e_stop()) {
      set_e_stop(from.e_stop());
    }
    if (from.has_remote()) {
      mutable_remote()->::R2SRemoteControl::MergeFrom(from.remote());
    }
    if (from.has_c_flag()) {
      set_c_flag(from.c_flag());
    }
    if (from.has_a_flag()) {
      set_a_flag(from.a_flag());
    }
    if (from.has_point()) {
      mutable_point()->::R2SMitionPoint::MergeFrom(from.point());
    }
    if (from.has_origin()) {
      mutable_origin()->::R2SOriginPoint::MergeFrom(from.origin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mition_f()) {
      set_mition_f(from.mition_f());
    }
    if (from.has_wants()) {
      set_wants(from.wants());
    }
    if (from.has_mapname()) {
      set_has_mapname();
      mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void R2SResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2SResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2SResponse::CopyFrom(const R2SResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2SResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2SResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000201) != 0x00000201) return false;

  if (has_remote()) {
    if (!this->remote_->IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  return true;
}

void R2SResponse::Swap(R2SResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2SResponse::InternalSwap(R2SResponse* other) {
  std::swap(code_, other->code_);
  info_.Swap(&other->info_);
  std::swap(e_stop_, other->e_stop_);
  std::swap(remote_, other->remote_);
  std::swap(c_flag_, other->c_flag_);
  std::swap(a_flag_, other->a_flag_);
  std::swap(point_, other->point_);
  std::swap(origin_, other->origin_);
  std::swap(mition_f_, other->mition_f_);
  std::swap(wants_, other->wants_);
  mapname_.Swap(&other->mapname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2SResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2SResponse_descriptor_;
  metadata.reflection = R2SResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2SResponse

// required int32 code = 1;
bool R2SResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2SResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void R2SResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2SResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 R2SResponse::code() const {
  // @@protoc_insertion_point(field_get:R2SResponse.code)
  return code_;
}
 void R2SResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.code)
}

// optional string info = 2;
bool R2SResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2SResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void R2SResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2SResponse::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
 const ::std::string& R2SResponse::info() const {
  // @@protoc_insertion_point(field_get:R2SResponse.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SResponse::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SResponse.info)
}
 void R2SResponse::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SResponse.info)
}
 void R2SResponse::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SResponse.info)
}
 ::std::string* R2SResponse::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:R2SResponse.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* R2SResponse::release_info() {
  // @@protoc_insertion_point(field_release:R2SResponse.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SResponse::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.info)
}

// optional int32 e_stop = 3;
bool R2SResponse::has_e_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2SResponse::set_has_e_stop() {
  _has_bits_[0] |= 0x00000004u;
}
void R2SResponse::clear_has_e_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2SResponse::clear_e_stop() {
  e_stop_ = 0;
  clear_has_e_stop();
}
 ::google::protobuf::int32 R2SResponse::e_stop() const {
  // @@protoc_insertion_point(field_get:R2SResponse.e_stop)
  return e_stop_;
}
 void R2SResponse::set_e_stop(::google::protobuf::int32 value) {
  set_has_e_stop();
  e_stop_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.e_stop)
}

// optional .R2SRemoteControl remote = 4;
bool R2SResponse::has_remote() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2SResponse::set_has_remote() {
  _has_bits_[0] |= 0x00000008u;
}
void R2SResponse::clear_has_remote() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2SResponse::clear_remote() {
  if (remote_ != NULL) remote_->::R2SRemoteControl::Clear();
  clear_has_remote();
}
const ::R2SRemoteControl& R2SResponse::remote() const {
  // @@protoc_insertion_point(field_get:R2SResponse.remote)
  return remote_ != NULL ? *remote_ : *default_instance_->remote_;
}
::R2SRemoteControl* R2SResponse::mutable_remote() {
  set_has_remote();
  if (remote_ == NULL) {
    remote_ = new ::R2SRemoteControl;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.remote)
  return remote_;
}
::R2SRemoteControl* R2SResponse::release_remote() {
  // @@protoc_insertion_point(field_release:R2SResponse.remote)
  clear_has_remote();
  ::R2SRemoteControl* temp = remote_;
  remote_ = NULL;
  return temp;
}
void R2SResponse::set_allocated_remote(::R2SRemoteControl* remote) {
  delete remote_;
  remote_ = remote;
  if (remote) {
    set_has_remote();
  } else {
    clear_has_remote();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.remote)
}

// optional int32 c_flag = 5;
bool R2SResponse::has_c_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2SResponse::set_has_c_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void R2SResponse::clear_has_c_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2SResponse::clear_c_flag() {
  c_flag_ = 0;
  clear_has_c_flag();
}
 ::google::protobuf::int32 R2SResponse::c_flag() const {
  // @@protoc_insertion_point(field_get:R2SResponse.c_flag)
  return c_flag_;
}
 void R2SResponse::set_c_flag(::google::protobuf::int32 value) {
  set_has_c_flag();
  c_flag_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.c_flag)
}

// optional int32 a_flag = 6;
bool R2SResponse::has_a_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void R2SResponse::set_has_a_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void R2SResponse::clear_has_a_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void R2SResponse::clear_a_flag() {
  a_flag_ = 0;
  clear_has_a_flag();
}
 ::google::protobuf::int32 R2SResponse::a_flag() const {
  // @@protoc_insertion_point(field_get:R2SResponse.a_flag)
  return a_flag_;
}
 void R2SResponse::set_a_flag(::google::protobuf::int32 value) {
  set_has_a_flag();
  a_flag_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.a_flag)
}

// optional .R2SMitionPoint point = 7;
bool R2SResponse::has_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void R2SResponse::set_has_point() {
  _has_bits_[0] |= 0x00000040u;
}
void R2SResponse::clear_has_point() {
  _has_bits_[0] &= ~0x00000040u;
}
void R2SResponse::clear_point() {
  if (point_ != NULL) point_->::R2SMitionPoint::Clear();
  clear_has_point();
}
const ::R2SMitionPoint& R2SResponse::point() const {
  // @@protoc_insertion_point(field_get:R2SResponse.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::R2SMitionPoint* R2SResponse::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::R2SMitionPoint;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.point)
  return point_;
}
::R2SMitionPoint* R2SResponse::release_point() {
  // @@protoc_insertion_point(field_release:R2SResponse.point)
  clear_has_point();
  ::R2SMitionPoint* temp = point_;
  point_ = NULL;
  return temp;
}
void R2SResponse::set_allocated_point(::R2SMitionPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.point)
}

// optional .R2SOriginPoint origin = 8;
bool R2SResponse::has_origin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void R2SResponse::set_has_origin() {
  _has_bits_[0] |= 0x00000080u;
}
void R2SResponse::clear_has_origin() {
  _has_bits_[0] &= ~0x00000080u;
}
void R2SResponse::clear_origin() {
  if (origin_ != NULL) origin_->::R2SOriginPoint::Clear();
  clear_has_origin();
}
const ::R2SOriginPoint& R2SResponse::origin() const {
  // @@protoc_insertion_point(field_get:R2SResponse.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::R2SOriginPoint* R2SResponse::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::R2SOriginPoint;
  }
  // @@protoc_insertion_point(field_mutable:R2SResponse.origin)
  return origin_;
}
::R2SOriginPoint* R2SResponse::release_origin() {
  // @@protoc_insertion_point(field_release:R2SResponse.origin)
  clear_has_origin();
  ::R2SOriginPoint* temp = origin_;
  origin_ = NULL;
  return temp;
}
void R2SResponse::set_allocated_origin(::R2SOriginPoint* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.origin)
}

// optional bool mition_f = 9;
bool R2SResponse::has_mition_f() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void R2SResponse::set_has_mition_f() {
  _has_bits_[0] |= 0x00000100u;
}
void R2SResponse::clear_has_mition_f() {
  _has_bits_[0] &= ~0x00000100u;
}
void R2SResponse::clear_mition_f() {
  mition_f_ = false;
  clear_has_mition_f();
}
 bool R2SResponse::mition_f() const {
  // @@protoc_insertion_point(field_get:R2SResponse.mition_f)
  return mition_f_;
}
 void R2SResponse::set_mition_f(bool value) {
  set_has_mition_f();
  mition_f_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.mition_f)
}

// required int32 wants = 11;
bool R2SResponse::has_wants() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void R2SResponse::set_has_wants() {
  _has_bits_[0] |= 0x00000200u;
}
void R2SResponse::clear_has_wants() {
  _has_bits_[0] &= ~0x00000200u;
}
void R2SResponse::clear_wants() {
  wants_ = 0;
  clear_has_wants();
}
 ::google::protobuf::int32 R2SResponse::wants() const {
  // @@protoc_insertion_point(field_get:R2SResponse.wants)
  return wants_;
}
 void R2SResponse::set_wants(::google::protobuf::int32 value) {
  set_has_wants();
  wants_ = value;
  // @@protoc_insertion_point(field_set:R2SResponse.wants)
}

// optional string mapname = 12;
bool R2SResponse::has_mapname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void R2SResponse::set_has_mapname() {
  _has_bits_[0] |= 0x00000400u;
}
void R2SResponse::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000400u;
}
void R2SResponse::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapname();
}
 const ::std::string& R2SResponse::mapname() const {
  // @@protoc_insertion_point(field_get:R2SResponse.mapname)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SResponse::set_mapname(const ::std::string& value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2SResponse.mapname)
}
 void R2SResponse::set_mapname(const char* value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2SResponse.mapname)
}
 void R2SResponse::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2SResponse.mapname)
}
 ::std::string* R2SResponse::mutable_mapname() {
  set_has_mapname();
  // @@protoc_insertion_point(field_mutable:R2SResponse.mapname)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* R2SResponse::release_mapname() {
  // @@protoc_insertion_point(field_release:R2SResponse.mapname)
  clear_has_mapname();
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void R2SResponse::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    set_has_mapname();
  } else {
    clear_has_mapname();
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:R2SResponse.mapname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
